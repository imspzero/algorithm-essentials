"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3716],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>h});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function d(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),p=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):d(d({},n),e)),r},s=function(e){var n=p(e.components);return t.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=p(r),h=a,b=u["".concat(i,".").concat(h)]||u[h]||c[h]||o;return r?t.createElement(b,d(d({ref:n},s),{},{components:r})):t.createElement(b,d({ref:n},s))}));function h(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,d=new Array(o);d[0]=u;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,d[1]=l;for(var p=2;p<o;p++)d[p]=r[p];return t.createElement.apply(null,d)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},5162:(e,n,r)=>{r.d(n,{Z:()=>d});var t=r(7294),a=r(6010);const o="tabItem_Ymn6";function d(e){let{children:n,hidden:r,className:d}=e;return t.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,d),hidden:r},n)}},5488:(e,n,r)=>{r.d(n,{Z:()=>h});var t=r(7462),a=r(7294),o=r(6010),d=r(2389),l=r(7392),i=r(7094),p=r(2466);const s="tabList__CuJ",c="tabItem_LNqP";function u(e){var n;const{lazy:r,block:d,defaultValue:u,values:h,groupId:b,className:v}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=h??m.map((e=>{let{props:{value:n,label:r,attributes:t}}=e;return{value:n,label:r,attributes:t}})),g=(0,l.l)(f,((e,n)=>e.value===n.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===u?u:u??(null==(n=m.find((e=>e.props.default)))?void 0:n.props.value)??m[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:N,setTabGroupChoices:k}=(0,i.U)(),[G,w]=(0,a.useState)(y),U=[],{blockElementScrollPositionUntilNextRender:O}=(0,p.o5)();if(null!=b){const e=N[b];null!=e&&e!==G&&f.some((n=>n.value===e))&&w(e)}const T=e=>{const n=e.currentTarget,r=U.indexOf(n),t=f[r].value;t!==G&&(O(n),w(t),null!=b&&k(b,String(t)))},C=e=>{var n;let r=null;switch(e.key){case"ArrowRight":{const n=U.indexOf(e.currentTarget)+1;r=U[n]??U[0];break}case"ArrowLeft":{const n=U.indexOf(e.currentTarget)-1;r=U[n]??U[U.length-1];break}}null==(n=r)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",s)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":d},v)},f.map((e=>{let{value:n,label:r,attributes:d}=e;return a.createElement("li",(0,t.Z)({role:"tab",tabIndex:G===n?0:-1,"aria-selected":G===n,key:n,ref:e=>U.push(e),onKeyDown:C,onFocus:T,onClick:T},d,{className:(0,o.Z)("tabs__item",c,null==d?void 0:d.className,{"tabs__item--active":G===n})}),r??n)}))),r?(0,a.cloneElement)(m.filter((e=>e.props.value===G))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==G})))))}function h(e){const n=(0,d.Z)();return a.createElement(u,(0,t.Z)({key:String(n)},e))}},2236:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var t=r(7462),a=(r(7294),r(3905)),o=r(5488),d=r(5162);const l={title:"Clone Graph"},i=void 0,p={unversionedId:"graph/clone-graph",id:"graph/clone-graph",title:"Clone Graph",description:"\u63cf\u8ff0",source:"@site/docs/graph/clone-graph.md",sourceDirName:"graph",slug:"/graph/clone-graph",permalink:"/en/graph/clone-graph",draft:!1,tags:[],version:"current",frontMatter:{title:"Clone Graph"},sidebar:"docs",previous:{title:"\u56fe",permalink:"/en/graph/"},next:{title:"Graph Valid Tree",permalink:"/en/graph/graph-valid-tree"}},s={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"DFS",id:"dfs",level:3},{value:"BFS",id:"bfs",level:3}],u={toc:c};function h(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Clone an undirected graph. Each node in the graph contains a ",(0,a.kt)("inlineCode",{parentName:"p"},"label")," and a list of its ",(0,a.kt)("inlineCode",{parentName:"p"},"neighbours"),"."),(0,a.kt)("p",null,"OJ's undirected graph serialization:\nNodes are labeled uniquely."),(0,a.kt)("p",null,"We use ",(0,a.kt)("inlineCode",{parentName:"p"},"#")," as a separator for each node, and ",(0,a.kt)("inlineCode",{parentName:"p"},",")," as a separator for node label and each neighbour of the node.\nAs an example, consider the serialized graph ",(0,a.kt)("inlineCode",{parentName:"p"},"{0,1,2#1,2#2,2}"),"."),(0,a.kt)("p",null,"The graph has a total of three nodes, and therefore contains three parts as separated by ",(0,a.kt)("inlineCode",{parentName:"p"},"#"),"."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"First node is labeled as 0. Connect node 0 to both nodes 1 and 2."),(0,a.kt)("li",{parentName:"ol"},"Second node is labeled as 1. Connect node 1 to node 2."),(0,a.kt)("li",{parentName:"ol"},"Third node is labeled as 2. Connect node 2 to node 2 (itself), thus forming a self-cycle.")),(0,a.kt)("p",null,"Visually, the graph looks like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"       1\n      / \\\n     /   \\\n    0 --- 2\n         / \\\n         \\_/\n")),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u5e7f\u5ea6\u4f18\u5148\u904d\u5386\u6216\u6df1\u5ea6\u4f18\u5148\u904d\u5386\u90fd\u53ef\u4ee5\u3002"),(0,a.kt)("h3",{id:"dfs"},"DFS"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(d.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Clone Graph\n// DFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\n        if(node == null) return null;\n        // key is original node\uff0cvalue is copied node\n        HashMap<UndirectedGraphNode, UndirectedGraphNode> visited = new HashMap<>();\n        clone(node, visited);\n        return visited.get(node);\n    }\n    // DFS\n    private static UndirectedGraphNode clone(UndirectedGraphNode node,\n                                              HashMap<UndirectedGraphNode,\n                                                      UndirectedGraphNode> visited) {\n        // a copy already exists\n        if (visited.containsKey(node)) return visited.get(node);\n\n        UndirectedGraphNode new_node = new UndirectedGraphNode(node.label);\n        visited.put(node, new_node);\n        for (UndirectedGraphNode nbr : node.neighbors)\n            new_node.neighbors.add(clone(nbr, visited));\n        return new_node;\n    }\n}\n"))),(0,a.kt)(d.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Clone Graph\n// DFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    UndirectedGraphNode *cloneGraph(const UndirectedGraphNode *node) {\n        if(node == nullptr) return nullptr;\n        // key is original node\uff0cvalue is copied node\n        unordered_map<const UndirectedGraphNode *,\n                            UndirectedGraphNode *> visited;\n        clone(node, visited);\n        return visited[node];\n    }\nprivate:\n    // DFS\n    static UndirectedGraphNode* clone(const UndirectedGraphNode *node,\n            unordered_map<const UndirectedGraphNode *,\n            UndirectedGraphNode *> &visited) {\n        // a copy already exists\n        if (visited.find(node) != visited.end()) return visited[node];\n\n        UndirectedGraphNode *new_node = new UndirectedGraphNode(node->label);\n        visited[node] = new_node;\n        for (auto nbr : node->neighbors)\n            new_node->neighbors.push_back(clone(nbr, visited));\n        return new_node;\n    }\n};\n")))),(0,a.kt)("h3",{id:"bfs"},"BFS"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(d.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Clone Graph\n// BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {\n        if (node == null) return null;\n        // key is original node\uff0cvalue is copied node\n        HashMap<UndirectedGraphNode,UndirectedGraphNode> visited = new HashMap<>();\n        // each node in queue is already copied itself\n        // but neighbors are not copied yet\n        Queue<UndirectedGraphNode> q = new LinkedList<>();\n        q.offer(node);\n        visited.put(node, new UndirectedGraphNode(node.label));\n        while (!q.isEmpty()) {\n            UndirectedGraphNode cur = q.poll();\n            for (UndirectedGraphNode nbr : cur.neighbors) {\n                // a copy already exists\n                if (visited.containsKey(nbr)) {\n                    visited.get(cur).neighbors.add(visited.get(nbr));\n                } else {\n                    UndirectedGraphNode new_node =\n                            new UndirectedGraphNode(nbr.label);\n                    visited.put(nbr, new_node);\n                    visited.get(cur).neighbors.add(new_node);\n                    q.offer(nbr);\n                }\n            }\n        }\n        return visited.get(node);\n    }\n}\n"))),(0,a.kt)(d.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Clone Graph\n// BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    UndirectedGraphNode *cloneGraph(const UndirectedGraphNode *node) {\n        if (node == nullptr) return nullptr;\n        // key is original node\uff0cvalue is copied node\n        unordered_map<const UndirectedGraphNode *,\n                            UndirectedGraphNode *> copied;\n        // each node in queue is already copied itself\n        // but neighbors are not copied yet\n        queue<const UndirectedGraphNode *> q;\n        q.push(node);\n        copied[node] = new UndirectedGraphNode(node->label);\n        while (!q.empty()) {\n            const UndirectedGraphNode *cur = q.front();\n            q.pop();\n            for (auto nbr : cur->neighbors) {\n                // a copy already exists\n                if (copied.find(nbr) != copied.end()) {\n                    copied[cur]->neighbors.push_back(copied[nbr]);\n                } else {\n                    UndirectedGraphNode *new_node =\n                            new UndirectedGraphNode(nbr->label);\n                    copied[nbr] = new_node;\n                    copied[cur]->neighbors.push_back(new_node);\n                    q.push(nbr);\n                }\n            }\n        }\n        return copied[node];\n    }\n};\n")))))}h.isMDXComponent=!0}}]);