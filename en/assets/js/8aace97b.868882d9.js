"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3348],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),u=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(n),f=r,d=m["".concat(o,".").concat(f)]||m[f]||c[f]||s;return n?a.createElement(d,l(l({ref:t},p),{},{components:n})):a.createElement(d,l({ref:t},p))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,l=new Array(s);l[0]=m;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var u=2;u<s;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const s="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(s,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(7462),r=n(7294),s=n(6010),l=n(2389),i=n(7392),o=n(7094),u=n(2466);const p="tabList__CuJ",c="tabItem_LNqP";function m(e){var t;const{lazy:n,block:l,defaultValue:m,values:f,groupId:d,className:b}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=f??v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,i.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const T=null===m?m:m??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==T&&!h.some((e=>e.value===T)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${T}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:N}=(0,o.U)(),[I,O]=(0,r.useState)(T),x=[],{blockElementScrollPositionUntilNextRender:k}=(0,u.o5)();if(null!=d){const e=g[d];null!=e&&e!==I&&h.some((t=>t.value===e))&&O(e)}const E=e=>{const t=e.currentTarget,n=x.indexOf(t),a=h[n].value;a!==I&&(k(t),O(a),null!=d&&N(d,String(a)))},w=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=x.indexOf(e.currentTarget)+1;n=x[t]??x[0];break}case"ArrowLeft":{const t=x.indexOf(e.currentTarget)-1;n=x[t]??x[x.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,s.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":l},b)},h.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,key:t,ref:e=>x.push(e),onKeyDown:w,onFocus:E,onClick:E},l,{className:(0,s.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":I===t})}),n??t)}))),n?(0,r.cloneElement)(v.filter((e=>e.props.value===I))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==I})))))}function f(e){const t=(0,l.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},4140:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>u,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),s=n(5488),l=n(5162);const i={title:"Valid Number"},o=void 0,u={unversionedId:"string/valid-number",id:"string/valid-number",title:"Valid Number",description:"\u63cf\u8ff0",source:"@site/docs/string/valid-number.md",sourceDirName:"string",slug:"/string/valid-number",permalink:"/en/string/valid-number",draft:!1,tags:[],version:"current",frontMatter:{title:"Valid Number"},sidebar:"docs",previous:{title:"Longest Common Prefix",permalink:"/en/string/longest-common-prefix"},next:{title:"Integer to Roman",permalink:"/en/string/integer-to-roman"}},p={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u6709\u9650\u81ea\u52a8\u673a",id:"\u6709\u9650\u81ea\u52a8\u673a",level:3}],m={toc:c};function f(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Validate if a given string is numeric."),(0,r.kt)("p",null,"Some examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"0" => true\n" 0.1 " => true\n"abc" => false\n"1 a" => false\n"2e10" => true\n')),(0,r.kt)("p",null,"Note: It is intended for the problem statement to be ambiguous. You should gather all requirements up front before implementing one."),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u7ec6\u8282\u5b9e\u73b0\u9898\u3002"),(0,r.kt)("p",null,"\u672c\u9898\u7684\u529f\u80fd\u4e0e\u6807\u51c6\u5e93\u4e2d\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"strtod()"),"\u529f\u80fd\u7c7b\u4f3c\u3002"),(0,r.kt)("h3",{id:"\u6709\u9650\u81ea\u52a8\u673a"},"\u6709\u9650\u81ea\u52a8\u673a"),(0,r.kt)(s.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Valid Number\n// finite automata\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public boolean isNumber(String s) {\n        int[][] transitionTable  = new int[][] {\n            { -1, 0, 3, 1, 2, -1 }, // next states for state 0\n            { -1, 8, -1, 1, 4, 5 },     // next states for state 1\n            { -1, -1, -1, 4, -1, -1 },     // next states for state 2\n            { -1, -1, -1, 1, 2, -1 },     // next states for state 3\n            { -1, 8, -1, 4, -1, 5 },     // next states for state 4\n            { -1, -1, 6, 7, -1, -1 },     // next states for state 5\n            { -1, -1, -1, 7, -1, -1 },     // next states for state 6\n            { -1, 8, -1, 7, -1, -1 },     // next states for state 7\n            { -1, 8, -1, -1, -1, -1 }     // next states for state 8\n        };\n\n        int state = 0;\n        for (int i = 0; i < s.length(); ++i) {\n            final char ch = s.charAt(i);\n            InputType inputType = InputType.INVALID;\n\n            if (Character.isSpaceChar(ch))\n                inputType = InputType.SPACE;\n            else if (ch == '+' || ch == '-')\n                inputType = InputType.SIGN;\n            else if (Character.isDigit(ch))\n                inputType = InputType.DIGIT;\n            else if (ch == '.')\n                inputType = InputType.DOT;\n            else if (ch == 'e' || ch == 'E')\n                inputType = InputType.EXPONENT;\n\n            // Get next state from current state and input symbol\n            state = transitionTable[state][inputType.ordinal()];\n\n            // Invalid input\n            if (state == -1) return false;\n        }\n        // If the current state belongs to one of the accepting (final) states,\n        // then the number is valid\n        return state == 1 || state == 4 || state == 7 || state == 8;\n\n    }\n    enum InputType {\n        INVALID,    // 0\n        SPACE,      // 1\n        SIGN,       // 2\n        DIGIT,      // 3\n        DOT,        // 4\n        EXPONENT,   // 5\n        NUM_INPUTS  // 6\n    }\n}\n"))),(0,r.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Valid Number\n// @author \u9f9a\u9646\u5b89 (http://weibo.com/luangong)\n// finite automata\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    bool isNumber(const string& s) {\n        enum InputType {\n            INVALID,    // 0\n            SPACE,      // 1\n            SIGN,       // 2\n            DIGIT,      // 3\n            DOT,        // 4\n            EXPONENT,   // 5\n            NUM_INPUTS  // 6\n        };\n        const int transitionTable[][NUM_INPUTS] = {\n                -1, 0, 3, 1, 2, -1, // next states for state 0\n                -1, 8, -1, 1, 4, 5,     // next states for state 1\n                -1, -1, -1, 4, -1, -1,     // next states for state 2\n                -1, -1, -1, 1, 2, -1,     // next states for state 3\n                -1, 8, -1, 4, -1, 5,     // next states for state 4\n                -1, -1, 6, 7, -1, -1,     // next states for state 5\n                -1, -1, -1, 7, -1, -1,     // next states for state 6\n                -1, 8, -1, 7, -1, -1,     // next states for state 7\n                -1, 8, -1, -1, -1, -1,     // next states for state 8\n                };\n\n        int state = 0;\n        for (auto ch : s) {\n            InputType inputType = INVALID;\n            if (isspace(ch))\n                inputType = SPACE;\n            else if (ch == '+' || ch == '-')\n                inputType = SIGN;\n            else if (isdigit(ch))\n                inputType = DIGIT;\n            else if (ch == '.')\n                inputType = DOT;\n            else if (ch == 'e' || ch == 'E')\n                inputType = EXPONENT;\n\n            // Get next state from current state and input symbol\n            state = transitionTable[state][inputType];\n\n            // Invalid input\n            if (state == -1) return false;\n        }\n        // If the current state belongs to one of the accepting (final) states,\n        // then the number is valid\n        return state == 1 || state == 4 || state == 7 || state == 8;\n\n    }\n};\n")))))}f.isMDXComponent=!0}}]);