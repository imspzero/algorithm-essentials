"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[6303],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),p=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(o.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=a,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const l="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(7462),a=n(7294),l=n(6010),i=n(2389),s=n(7392),o=n(7094),p=n(2466);const u="tabList__CuJ",m="tabItem_LNqP";function c(e){var t;const{lazy:n,block:i,defaultValue:c,values:d,groupId:f,className:k}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=d??b.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),h=(0,s.l)(g,((e,t)=>e.value===t.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===c?c:c??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==N&&!g.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:y,setTabGroupChoices:v}=(0,o.U)(),[z,T]=(0,a.useState)(N),S=[],{blockElementScrollPositionUntilNextRender:D}=(0,p.o5)();if(null!=f){const e=y[f];null!=e&&e!==z&&g.some((t=>t.value===e))&&T(e)}const w=e=>{const t=e.currentTarget,n=S.indexOf(t),r=g[n].value;r!==z&&(D(t),T(r),null!=f&&v(f,String(r)))},O=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=S.indexOf(e.currentTarget)+1;n=S[t]??S[0];break}case"ArrowLeft":{const t=S.indexOf(e.currentTarget)-1;n=S[t]??S[S.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":i},k)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:z===t?0:-1,"aria-selected":z===t,key:t,ref:e=>S.push(e),onKeyDown:O,onFocus:w,onClick:w},i,{className:(0,l.Z)("tabs__item",m,null==i?void 0:i.className,{"tabs__item--active":z===t})}),n??t)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===z))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==z})))))}function d(e){const t=(0,i.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},3144:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var r=n(7462),a=(n(7294),n(3905)),l=n(5488),i=n(5162);const s={title:"Serialize and Deserialize Binary Tree"},o=void 0,p={unversionedId:"binary-tree/recursion/serialize-and-deserialize-binary-tree",id:"binary-tree/recursion/serialize-and-deserialize-binary-tree",title:"Serialize and Deserialize Binary Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/serialize-and-deserialize-binary-tree.md",sourceDirName:"binary-tree/recursion",slug:"/binary-tree/recursion/serialize-and-deserialize-binary-tree",permalink:"/en/binary-tree/recursion/serialize-and-deserialize-binary-tree",draft:!1,tags:[],version:"current",frontMatter:{title:"Serialize and Deserialize Binary Tree"},sidebar:"docs",previous:{title:"LCA of Binary Tree",permalink:"/en/binary-tree/recursion/lca-of-binary-tree"},next:{title:"Range Sum Query - Mutable",permalink:"/en/binary-tree/segment-tree/range-sum-query-mutable"}},u={},m=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:m};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment."),(0,a.kt)("p",null,"Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure."),(0,a.kt)("p",null,"Clarification: The input/output format is the same as ",(0,a.kt)("a",{parentName:"p",href:"https://leetcode.com/faq/#binary-tree"},"how LeetCode serializes a binary tree"),". You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 1"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"  1\n / \\\n2   3\n   / \\\n  4   5\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Input"),": root = ","[1,2,3,null,null,4,5]",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Output"),": ","[1,2,3,null,null,4,5]")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 2"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Input"),": root = []",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Output"),": []")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 3"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Input"),": root = ","[1]",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Output"),": ","[1]")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example 4"),":"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("strong",{parentName:"p"},"Input"),": root = ","[1,2]",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Output"),": ","[1,2]")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Constraints"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The number of nodes in the tree is in the range ","[0, ",(0,a.kt)("span",{parentName:"li",className:"math math-inline"},(0,a.kt)("span",{parentName:"span",className:"katex"},(0,a.kt)("span",{parentName:"span",className:"katex-mathml"},(0,a.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,a.kt)("semantics",{parentName:"math"},(0,a.kt)("mrow",{parentName:"semantics"},(0,a.kt)("mn",{parentName:"mrow"},"1"),(0,a.kt)("msup",{parentName:"mrow"},(0,a.kt)("mn",{parentName:"msup"},"0"),(0,a.kt)("mn",{parentName:"msup"},"4"))),(0,a.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"10^4")))),(0,a.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,a.kt)("span",{parentName:"span",className:"base"},(0,a.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8141em"}}),(0,a.kt)("span",{parentName:"span",className:"mord"},"1"),(0,a.kt)("span",{parentName:"span",className:"mord"},(0,a.kt)("span",{parentName:"span",className:"mord"},"0"),(0,a.kt)("span",{parentName:"span",className:"msupsub"},(0,a.kt)("span",{parentName:"span",className:"vlist-t"},(0,a.kt)("span",{parentName:"span",className:"vlist-r"},(0,a.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,a.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,a.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,a.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,a.kt)("span",{parentName:"span",className:"mord mtight"},"4")))))))))))),"]","."),(0,a.kt)("li",{parentName:"ul"},"-1000 <= Node.val <= 1000")),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u8fd9\u9898\u672c\u8d28\u4e0a\u8003\u7684\u662f\u4e8c\u53c9\u6811\u7684\u904d\u5386\uff0c\u524d\u5e8f\uff0c\u4e2d\u5e8f\uff0c\u540e\u5e8f\uff0cBFS\uff0c\u65e0\u8bba\u54ea\u79cd\u90fd\u53ef\u4ee5\u3002"),(0,a.kt)("p",null,'\u6ce8\u610f\uff0c\u7a7a\u53f6\u5b50\u8282\u70b9\u4e5f\u5fc5\u987b\u7f16\u7801\u4e3a"null"\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u5b58\u5b8c\u6574\u7684\u6811\u7ed3\u6784\u3002'),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)(l.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'# Serialize and Deserialize Binary Tree\n# Time Complexity O(n), Space Complexity O(n)\nclass Codec:\n\n    def serialize(self, root):\n        return self.serializeDFS(root, "")\n\n    def serializeDFS(self, root, string: str):\n        if root is None:\n            string += "null,"\n        else:\n            string += str(root.val) + ","\n            string = self.serializeDFS(root.left, string)\n            string = self.serializeDFS(root.right, string)\n        return string\n\n    def deserialize(self, data):\n        return self.deserializeDFS(data.split(\',\'))\n\n    def deserializeDFS(self, l):\n        if l[0] == \'null\':\n            l.pop(0)\n            return None\n\n        root = TreeNode(l[0])\n        l.pop(0)\n        root.left = self.deserializeDFS(l)\n        root.right = self.deserializeDFS(l)\n        return root\n'))),(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\npublic class Codec {\n\n    public String serialize(TreeNode root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    private static String serializeDFS(TreeNode root, String str) {\n        if (root == null) {\n            str += "null," ;\n        } else {\n            str += String.valueOf(root.val) + ",";\n            str = serializeDFS(root.left, str);\n            str = serializeDFS(root.right, str);\n        }\n        return str;\n    }\n\n    public TreeNode deserialize(String data) {\n        String[] arr = data.split(",");\n        LinkedList<String> l = new LinkedList<>(Arrays.asList(arr));\n        return deserializeDFS(l);\n    }\n\n    private static TreeNode deserializeDFS(LinkedList<String> l) {\n        if (l.peekFirst().equals("null")) {\n            l.pollFirst();\n            return null;\n        }\n        TreeNode root = new TreeNode(Integer.valueOf(l.pollFirst()));\n        root.left = deserializeDFS(l);\n        root.right = deserializeDFS(l);\n        return root;\n    }\n}\n'))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Serialize and Deserialize Binary Tree\n// Time Complexity O(n), Space Complexity O(n)\nclass Codec {\npublic:\n\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        return serializeDFS(root, "");\n    }\n\n    // preorder\n    string serializeDFS(TreeNode* root, string str) {\n        if (root == nullptr) {\n            str += "null,";\n        } else {\n            str += std::to_string(root->val) + ",";\n            str = serializeDFS(root->left, str);\n            str = serializeDFS(root->right, str);\n        }\n        return str;\n    }\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream ss(data);\n        list<string> l;\n\n        string tmp;\n        while (getline(ss, tmp, \',\')) {\n            l.push_back(tmp);\n        }\n\n        return deserializeDFS(l);\n    }\n\n    TreeNode* deserializeDFS(list<string> &l) {\n        if (l.front() == "null") {\n            l.pop_front();\n            return nullptr;\n        }\n        TreeNode* root = new TreeNode(std::stoi(l.front()));\n        l.pop_front();\n        root->left = deserializeDFS(l);\n        root->right = deserializeDFS(l);\n        return root;\n    }\n};\n')))),(0,a.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/en/binary-tree/recursion/path-sum-ii"},"Path Sum II"))))}d.isMDXComponent=!0}}]);