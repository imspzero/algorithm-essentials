"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[584],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),u=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=u(e.components);return r.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),f=a,b=p["".concat(l,".").concat(f)]||p[f]||c[f]||o;return t?r.createElement(b,i(i({ref:n},d),{},{components:t})):r.createElement(b,i({ref:n},d))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>f});var r=t(7462),a=t(7294),o=t(6010),i=t(2389),s=t(7392),l=t(7094),u=t(2466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){var n;const{lazy:t,block:i,defaultValue:p,values:f,groupId:b,className:m}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=f??v.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),h=(0,s.l)(y,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===p?p:p??(null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)??v[0].props.value;if(null!==g&&!y.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:j}=(0,l.U)(),[w,x]=(0,a.useState)(g),O=[],{blockElementScrollPositionUntilNextRender:S}=(0,u.o5)();if(null!=b){const e=k[b];null!=e&&e!==w&&y.some((n=>n.value===e))&&x(e)}const X=e=>{const n=e.currentTarget,t=O.indexOf(n),r=y[t].value;r!==w&&(S(n),x(r),null!=b&&j(b,String(r)))},_=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;t=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;t=O[n]??O[O.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",d)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},m)},y.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:e=>O.push(e),onKeyDown:_,onFocus:X,onClick:X},i,{className:(0,o.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":w===n})}),t??n)}))),t?(0,a.cloneElement)(v.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==w})))))}function f(e){const n=(0,i.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},8229:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=t(7462),a=(t(7294),t(3905)),o=t(5488),i=t(5162);const s={title:"Surrounded Regions"},l=void 0,u={unversionedId:"bfs/surrounded-regions",id:"bfs/surrounded-regions",title:"Surrounded Regions",description:"\u63cf\u8ff0",source:"@site/docs/bfs/surrounded-regions.md",sourceDirName:"bfs",slug:"/bfs/surrounded-regions",permalink:"/en/bfs/surrounded-regions",draft:!1,tags:[],version:"current",frontMatter:{title:"Surrounded Regions"},sidebar:"docs",previous:{title:"Word Ladder II",permalink:"/en/bfs/word-ladder-ii"},next:{title:"The Maze",permalink:"/en/bfs/the-maze"}},d={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:c};function f(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a 2D board containing ",(0,a.kt)("inlineCode",{parentName:"p"},"'X'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'O'"),", capture all regions surrounded by ",(0,a.kt)("inlineCode",{parentName:"p"},"'X'"),"."),(0,a.kt)("p",null,"A region is captured by flipping all ",(0,a.kt)("inlineCode",{parentName:"p"},"'O'"),"s into ",(0,a.kt)("inlineCode",{parentName:"p"},"'X'"),"s in that surrounded region ."),(0,a.kt)("p",null,"For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"X X X X\nX O O X\nX X O X\nX O X X\n")),(0,a.kt)("p",null,"After running your function, the board should be:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"X X X X\nX X X X\nX X X X\nX O X X\n")),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u5e7f\u641c\u3002\u4ece\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u8fb9\u754c\u5f80\u91cc\u8d70\uff0c\u51e1\u662f\u80fd\u78b0\u5230\u7684",(0,a.kt)("inlineCode",{parentName:"p"},"'O'"),"\uff0c\u90fd\u662f\u8ddf\u8fb9\u754c\u63a5\u58e4\u7684\uff0c\u5e94\u8be5\u4fdd\u7559\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Surrounded Regions\n// BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public void solve(char[][] board) {\n        if (board.length == 0) return;\n\n        final int m = board.length;\n        final int n = board[0].length;\n        for (int i = 0; i < n; i++) {\n            bfs(board, 0, i);\n            bfs(board, m - 1, i);\n        }\n        for (int j = 1; j < m - 1; j++) {\n            bfs(board, j, 0);\n            bfs(board, j, n - 1);\n        }\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n                if (board[i][j] == 'O')\n                    board[i][j] = 'X';\n                else if (board[i][j] == '+')\n                    board[i][j] = 'O';\n    }\n    private static void bfs(char[][] board, int i, int j) {\n        Queue<State> q = new LinkedList<>();\n        final int m = board.length;\n        final int n = board[0].length;\n\n        final Function<State, Boolean> stateIsValid = (State s) -> {\n            if (s.x < 0 || s.x >= m || s.y < 0 || s.y >= n ||\n                    board[s.x][s.y] != 'O')\n                return false;\n            return true;\n        };\n        final Function<State, ArrayList<State>> stateExtend = (State s) -> {\n            ArrayList<State> result = new ArrayList<>();\n            final int x = s.x;\n            final int y = s.y;\n            // \u4e0a\u4e0b\u5de6\u53f3\n            State[] newStates = new State[]{new State(x-1, y),\n                    new State(x+1,y),\n                    new State(x,y-1),\n                    new State(x,y+1)\n            };\n            for (int k = 0; k < 4; ++k) {\n                if (stateIsValid.apply(newStates[k])) {\n                    // \u65e2\u6709\u6807\u8bb0\u529f\u80fd\u53c8\u6709\u53bb\u91cd\u529f\u80fd\n                    board[newStates[k].x][newStates[k].y] = '+';\n                    result.add(newStates[k]);\n                }\n            }\n            return result;\n        };\n        State start = new State(i, j);\n        if (stateIsValid.apply(start)) {\n            board[i][j] = '+';\n            q.offer(start);\n        }\n        while (!q.isEmpty()) {\n            State cur = q.poll();\n            ArrayList<State> newStates = stateExtend.apply(cur);\n            for (State s : newStates) q.offer(s);\n        }\n    }\n    static class State {\n        private int x;\n        private int y;\n        public State(int x, int y) {\n            this.x = x;\n            this.y = y;\n        }\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// LeetCode, Surrounded Regions\n// BFS\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    void solve(vector<vector<char>> &board) {\n        if (board.empty()) return;\n\n        const int m = board.size();\n        const int n = board[0].size();\n        for (int i = 0; i < n; i++) {\n            bfs(board, 0, i);\n            bfs(board, m - 1, i);\n        }\n        for (int j = 1; j < m - 1; j++) {\n            bfs(board, j, 0);\n            bfs(board, j, n - 1);\n        }\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n                if (board[i][j] == 'O')\n                    board[i][j] = 'X';\n                else if (board[i][j] == '+')\n                    board[i][j] = 'O';\n    }\nprivate:\n    void bfs(vector<vector<char>> &board, int i, int j) {\n        typedef pair<int, int> state_t;\n        queue<state_t> q;\n        const int m = board.size();\n        const int n = board[0].size();\n\n        auto state_is_valid = [&](const state_t &s) {\n            const int x = s.first;\n            const int y = s.second;\n            if (x < 0 || x >= m || y < 0 || y >= n || board[x][y] != 'O')\n                return false;\n            return true;\n        };\n\n        auto state_extend = [&](const state_t &s) {\n            vector<state_t> result;\n            const int x = s.first;\n            const int y = s.second;\n            // \u4e0a\u4e0b\u5de6\u53f3\n            const state_t new_states[4] = {{x-1,y}, {x+1,y},\n                    {x,y-1}, {x,y+1}};\n            for (int k = 0; k < 4;  ++k) {\n                if (state_is_valid(new_states[k])) {\n                    // \u65e2\u6709\u6807\u8bb0\u529f\u80fd\u53c8\u6709\u53bb\u91cd\u529f\u80fd\n                    board[new_states[k].first][new_states[k].second] = '+';\n                    result.push_back(new_states[k]);\n                }\n            }\n\n            return result;\n        };\n\n        state_t start = { i, j };\n        if (state_is_valid(start)) {\n            board[i][j] = '+';\n            q.push(start);\n        }\n        while (!q.empty()) {\n            auto cur = q.front();\n            q.pop();\n            auto new_states = state_extend(cur);\n            for (auto s : new_states) q.push(s);\n        }\n    }\n};\n")))))}f.isMDXComponent=!0}}]);