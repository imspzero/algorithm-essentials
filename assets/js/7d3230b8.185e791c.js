"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1947],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?i.createElement(f,o(o({ref:t},u),{},{components:n})):i.createElement(f,o({ref:t},u))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=n[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const a={title:"Combination Sum III"},o=void 0,l={unversionedId:"dfs/combination-sum-iii",id:"dfs/combination-sum-iii",title:"Combination Sum III",description:"\u63cf\u8ff0",source:"@site/docs/dfs/combination-sum-iii.md",sourceDirName:"dfs",slug:"/dfs/combination-sum-iii",permalink:"/dfs/combination-sum-iii",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dfs/combination-sum-iii.md",tags:[],version:"current",frontMatter:{title:"Combination Sum III"},sidebar:"someSidebar",previous:{title:"Combination Sum II",permalink:"/dfs/combination-sum-ii"},next:{title:"Generate Parentheses",permalink:"/dfs/generate-parentheses"}},s={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Find all possible combinations of ",(0,r.kt)("inlineCode",{parentName:"p"},"k")," numbers that add up to a number ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),", given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers."),(0,r.kt)("p",null,"Ensure that numbers within the set are sorted in ascending order."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Example 1"),":"),(0,r.kt)("p",null,"Input: ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"=3, ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"=7"),(0,r.kt)("p",null,"Output: ",(0,r.kt)("inlineCode",{parentName:"p"},"[[1,2,4]]")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Example 2"),":"),(0,r.kt)("p",null,"Input: ",(0,r.kt)("inlineCode",{parentName:"p"},"k"),"=3, ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"=9"),(0,r.kt)("p",null,"Output: ",(0,r.kt)("inlineCode",{parentName:"p"},"[[1,2,6], [1,3,5], [2,3,4]]")),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u591a\u9636\u6bb5\u95ee\u9898\uff0c\u76ee\u6807\u662f\u6c42\u6240\u6709\u89e3\uff0c\u663e\u7136\u7528\u6df1\u641c+\u526a\u679d\uff0c\u5373\u56de\u6eaf\u6cd5\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Combination Sum III\n// Time Complexity: O(9*8*...*(10-k)), Space Complexity: O(k)\npublic class Solution {\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        final List<List<Integer>> result = new ArrayList<>();\n        final List<Integer> path = new ArrayList<>();\n        dfs(k, n, path, result);\n        return result;\n    }\n\n    private static void dfs(int step, int gap, List<Integer> path,\n                            List<List<Integer>> result) {\n        if (step == 0) {\n            if (gap == 0) {\n                result.add(new ArrayList<>(path));\n            }\n            return;\n        }\n\n        if (gap < 1) return;\n\n        final int start = path.isEmpty() ? 1 : path.get(path.size() - 1)+1;\n        for (int i = start; i < 10; ++i) {\n            path.add(i);\n            dfs(step - 1, gap - i, path, result);\n            path.remove(path.size() - 1);\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dfs/combination-sum"},"Combination Sum")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/dfs/combination-sum-ii"},"Combination Sum II"))))}m.isMDXComponent=!0}}]);