"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7129],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),v=u(n),d=r,m=v["".concat(i,".").concat(d)]||v[d]||p[d]||l;return n?a.createElement(m,o(o({ref:t},c),{},{components:n})):a.createElement(m,o({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=v;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var u=2;u<l;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),l=n(6010),o=n(2389),s=n(7392),i=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function v(e){var t;const{lazy:n,block:o,defaultValue:v,values:d,groupId:m,className:k}=e,f=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=d??f.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),y=(0,s.l)(b,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const h=null===v?v:v??(null==(t=f.find((e=>e.props.default)))?void 0:t.props.value)??f[0].props.value;if(null!==h&&!b.some((e=>e.value===h)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${h}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:x}=(0,i.U)(),[N,O]=(0,r.useState)(h),T=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=m){const e=g[m];null!=e&&e!==N&&b.some((t=>t.value===e))&&O(e)}const w=e=>{const t=e.currentTarget,n=T.indexOf(t),a=b[n].value;a!==N&&(E(t),O(a),null!=m&&x(m,String(a)))},P=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=T.indexOf(e.currentTarget)+1;n=T[t]??T[0];break}case"ArrowLeft":{const t=T.indexOf(e.currentTarget)-1;n=T[t]??T[T.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":o},k)},b.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>T.push(e),onKeyDown:P,onFocus:w,onClick:w},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,r.cloneElement)(f.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},f.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function d(e){const t=(0,o.Z)();return r.createElement(v,(0,a.Z)({key:String(t)},e))}},9367:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),l=n(5488),o=n(5162);const s={title:"Evaluate Reverse Polish Notation"},i=void 0,u={unversionedId:"stack-and-queue/stack/evaluate-reverse-polish-notation",id:"stack-and-queue/stack/evaluate-reverse-polish-notation",title:"Evaluate Reverse Polish Notation",description:"\u63cf\u8ff0",source:"@site/docs/stack-and-queue/stack/evaluate-reverse-polish-notation.md",sourceDirName:"stack-and-queue/stack",slug:"/stack-and-queue/stack/evaluate-reverse-polish-notation",permalink:"/stack-and-queue/stack/evaluate-reverse-polish-notation",draft:!1,tags:[],version:"current",frontMatter:{title:"Evaluate Reverse Polish Notation"},sidebar:"docs",previous:{title:"Largest Rectangle in Histogram",permalink:"/stack-and-queue/stack/largest-rectangle-in-histogram"},next:{title:"Implement Stack using Queues",permalink:"/stack-and-queue/stack/implement-stack-using-queues"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:4},{value:"\u6808",id:"\u6808",level:4}],v={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Evaluate the value of an arithmetic expression in Reverse Polish Notation."),(0,r.kt)("p",null,"Valid operators are ",(0,r.kt)("inlineCode",{parentName:"p"},"+, -, *, /"),". Each operand may be an integer or another expression."),(0,r.kt)("p",null,"Some examples:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'  ["2", "1", "+", "3", "*"] -> ((2 + 1) * 3) -> 9\n  ["4", "13", "5", "/", "+"] -> (4 + (13 / 5)) -> 6\n')),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u9006\u6ce2\u5170\u8868\u8fbe\u5f0f\u662f\u5178\u578b\u7684\u9012\u5f52\u7ed3\u6784\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u9012\u5f52\u6765\u6c42\u89e3\uff0c\u4e5f\u53ef\u4ee5\u7528\u6808\u6765\u6c42\u89e3\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("h4",{id:"\u9012\u5f52\u7248"},"\u9012\u5f52\u7248"),(0,r.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Evaluate Reverse Polish Notation\n// Recursive\n// Time Complexity: O(n)\uff0cSpace Complexity: O(n)\nclass Solution {\n    private int top;\n\n    public int evalRPN(String[] tokens) {\n        top = tokens.length-1;\n        return dfs(tokens);\n    }\n\n    public int dfs(String[] tokens) {\n        String token = tokens[top--];\n        if (!"+-*/".contains(token)) {\n            return Integer.parseInt(token);\n        } else {\n            int y = dfs(tokens);\n            int x = dfs(tokens);\n            switch (token) {\n                case "+": return x + y;\n                case "-": return x - y;\n                case "*": return x * y;\n                default: return x / y;\n            }\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Evaluate Reverse Polish Notation\n// UsingStack\n// Time Complexity: O(n)\uff0cSpace Complexity: O(n)\nclass Solution {\npublic:\n    int evalRPN(vector<string>& tokens) {\n        const string& token = tokens.back(); tokens.pop_back();\n        if (string(\"+-*/\").find(token) == string::npos) {\n            return std::stoi(token);\n        } else {\n            int y = evalRPN(tokens);\n            int x = evalRPN(tokens);\n            switch(token[0]) {\n                case '+' : return x + y;\n                case '-' : return x - y;\n                case '*' : return x * y;\n                default:   return x / y;\n            }\n        }\n    }\n};\n")))),(0,r.kt)("h4",{id:"\u6808"},"\u6808"),(0,r.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Evaluate Reverse Polish Notation\n// UsingStack\n// Time Complexity: O(n)\uff0cSpace Complexity: O(n)\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        Stack<Integer> s = new Stack<>();\n        for (String token : tokens) {\n            if (!"+-*/".contains(token)) {\n                s.push(Integer.valueOf(token));\n            } else {\n                int y = s.pop();\n                int x = s.pop();\n                switch (token) {\n                    case "+": x += y; break;\n                    case "-": x -= y; break;\n                    case "*": x *= y; break;\n                    default: x /= y;\n                }\n                s.push(x);\n            }\n        }\n        return s.peek();\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Evaluate Reverse Polish Notation\n// UsingStack\n// Time Complexity: O(n)\uff0cSpace Complexity: O(n)\nclass Solution {\npublic:\n    int evalRPN(vector<string> &tokens) {\n        stack<int> s;\n        for (auto token : tokens) {\n            if (string(\"+-*/\").find(token) == string::npos) {\n                s.push(std::stoi(token));\n            } else {\n                int y = s.top(); s.pop();\n                int x = s.top(); s.pop();\n                switch(token[0]) {\n                    case '+' : x += y; break;\n                    case '-' : x -= y; break;\n                    case '*' : x *= y; break;\n                    default:   x /= y;\n                }\n                s.push(x);\n            }\n        }\n        return s.top();\n    }\n};\n")))))}d.isMDXComponent=!0}}]);