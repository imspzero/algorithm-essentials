"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[880],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>b});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)r=l[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(r),b=n,m=d["".concat(s,".").concat(b)]||d[b]||p[b]||l;return r?a.createElement(m,o(o({ref:t},c),{},{components:r})):a.createElement(m,o({ref:t},c))}));function b(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var u=2;u<l;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>o});var a=r(7294),n=r(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,n.Z)(l,o),hidden:r},t)}},5488:(e,t,r)=>{r.d(t,{Z:()=>b});var a=r(7462),n=r(7294),l=r(6010),o=r(2389),i=r(7392),s=r(7094),u=r(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,r;const{lazy:o,block:d,defaultValue:b,values:m,groupId:v,className:y}=e,h=n.Children.map(e.children,(e=>{if((0,n.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=m?m:h.map((e=>{let{props:{value:t,label:r,attributes:a}}=e;return{value:t,label:r,attributes:a}})),T=(0,i.l)(f,((e,t)=>e.value===t.value));if(T.length>0)throw new Error('Docusaurus error: Duplicate values "'+T.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===b?b:null!=(t=null!=b?b:null==(r=h.find((e=>e.props.default)))?void 0:r.props.value)?t:h[0].props.value;if(null!==g&&!f.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:w}=(0,s.U)(),[O,N]=(0,n.useState)(g),S=[],{blockElementScrollPositionUntilNextRender:E}=(0,u.o5)();if(null!=v){const e=k[v];null!=e&&e!==O&&f.some((t=>t.value===e))&&N(e)}const j=e=>{const t=e.currentTarget,r=S.indexOf(t),a=f[r].value;a!==O&&(E(t),N(a),null!=v&&w(v,String(a)))},B=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{var a;const t=S.indexOf(e.currentTarget)+1;r=null!=(a=S[t])?a:S[0];break}case"ArrowLeft":{var n;const t=S.indexOf(e.currentTarget)-1;r=null!=(n=S[t])?n:S[S.length-1];break}}null==(t=r)||t.focus()};return n.createElement("div",{className:(0,l.Z)("tabs-container",c)},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},y)},f.map((e=>{let{value:t,label:r,attributes:o}=e;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>S.push(e),onKeyDown:B,onFocus:j,onClick:j},o,{className:(0,l.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=r?r:t)}))),o?(0,n.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):n.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function b(e){const t=(0,o.Z)();return n.createElement(d,(0,a.Z)({key:String(t)},e))}},1762:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>i,metadata:()=>u,toc:()=>p});var a=r(7462),n=(r(7294),r(3905)),l=r(5488),o=r(5162);const i={title:"Validate Binary Search Tree"},s=void 0,u={unversionedId:"binary-tree/bst/validate-binary-search-tree",id:"binary-tree/bst/validate-binary-search-tree",title:"Validate Binary Search Tree",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/bst/validate-binary-search-tree.md",sourceDirName:"binary-tree/bst",slug:"/binary-tree/bst/validate-binary-search-tree",permalink:"/binary-tree/bst/validate-binary-search-tree",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/bst/validate-binary-search-tree.md",tags:[],version:"current",frontMatter:{title:"Validate Binary Search Tree"},sidebar:"someSidebar",previous:{title:"Unique Binary Search Trees II",permalink:"/binary-tree/bst/unique-binary-search-trees-ii"},next:{title:"Convert Sorted Array to Binary Search Tree",permalink:"/binary-tree/bst/convert-sorted-array-to-binary-search-tree"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:p};function b(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,n.kt)("p",null,"Given a binary tree, determine if it is a valid binary search tree (BST)."),(0,n.kt)("p",null,"Assume a BST is defined as follows:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The left subtree of a node contains only nodes with keys less than the node's key."),(0,n.kt)("li",{parentName:"ul"},"The right subtree of a node contains only nodes with keys greater than the node's key."),(0,n.kt)("li",{parentName:"ul"},"Both the left and right subtrees must also be binary search trees.")),(0,n.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,n.kt)("p",null,"\u65e0"),(0,n.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,n.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,n.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-java"},"// Validate Binary Search Tree\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\npublic class Solution {\n    public boolean isValidBST(TreeNode root) {\n        return isValidBST(root, INT_MIN, INT_MAX);\n    }\n\n    bool isValidBST(TreeNode* root, int lower, int upper) {\n        if (root == nullptr) return true;\n\n        return root.val > lower && root.val < upper\n                && isValidBST(root.left, lower, root.val)\n                && isValidBST(root.right, root.val, upper);\n    }\n}\n"))),(0,n.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-cpp"},"// Validate Binary Search Tree\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(\\logn)\nclass Solution {\npublic:\n    bool isValidBST(TreeNode* root) {\n        return isValidBST(root, LONG_MIN, LONG_MAX);\n    }\n\n    bool isValidBST(TreeNode* root, long long lower, long long upper) {\n        if (root == nullptr) return true;\n\n        return root->val > lower && root->val < upper\n                && isValidBST(root->left, lower, root->val)\n                && isValidBST(root->right, root->val, upper);\n    }\n};\n")))),(0,n.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/binary-tree/bst/validate-binary-search-tree"},"Validate Binary Search Tree"))))}b.isMDXComponent=!0}}]);