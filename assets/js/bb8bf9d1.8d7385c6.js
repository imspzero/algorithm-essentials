"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3355],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),u=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=u(e.components);return r.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=a,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,l(l({ref:n},c),{},{components:t})):r.createElement(f,l({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>m});var r=t(7462),a=t(7294),o=t(6010),l=t(2389),i=t(7392),s=t(7094),u=t(2466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var n,t;const{lazy:l,block:p,defaultValue:m,values:f,groupId:g,className:h}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),v=null!=f?f:b.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),w=(0,i.l)(v,((e,n)=>e.value===n.value));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===m?m:null!=(n=null!=m?m:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?n:b[0].props.value;if(null!==y&&!v.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+v.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:O}=(0,s.U)(),[j,C]=(0,a.useState)(y),S=[],{blockElementScrollPositionUntilNextRender:L}=(0,u.o5)();if(null!=g){const e=k[g];null!=e&&e!==j&&v.some((n=>n.value===e))&&C(e)}const T=e=>{const n=e.currentTarget,t=S.indexOf(n),r=v[t].value;r!==j&&(L(n),C(r),null!=g&&O(g,String(r)))},N=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var r;const n=S.indexOf(e.currentTarget)+1;t=null!=(r=S[n])?r:S[0];break}case"ArrowLeft":{var a;const n=S.indexOf(e.currentTarget)-1;t=null!=(a=S[n])?a:S[S.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":p},h)},v.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:j===n?0:-1,"aria-selected":j===n,key:n,ref:e=>S.push(e),onKeyDown:N,onFocus:T,onClick:T},l,{className:(0,o.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":j===n})}),null!=t?t:n)}))),l?(0,a.cloneElement)(b.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==j})))))}function m(e){const n=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},3687:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=t(7462),a=(t(7294),t(3905)),o=t(5488),l=t(5162);const i={title:"Substring with Concatenation of All Words"},s=void 0,u={unversionedId:"simulation/substring-with-concatenation-of-all-words",id:"simulation/substring-with-concatenation-of-all-words",title:"Substring with Concatenation of All Words",description:"\u63cf\u8ff0",source:"@site/docs/simulation/substring-with-concatenation-of-all-words.md",sourceDirName:"simulation",slug:"/simulation/substring-with-concatenation-of-all-words",permalink:"/simulation/substring-with-concatenation-of-all-words",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/simulation/substring-with-concatenation-of-all-words.md",tags:[],version:"current",frontMatter:{title:"Substring with Concatenation of All Words"},sidebar:"someSidebar",previous:{title:"Multiply Strings",permalink:"/simulation/multiply-strings"},next:{title:"Pascal's Triangle",permalink:"/simulation/pascal-s-triangle"}},c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:d};function m(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"You are given a string, ",(0,a.kt)("inlineCode",{parentName:"p"},"S"),", and a list of words, ",(0,a.kt)("inlineCode",{parentName:"p"},"L"),", that are all of the same length. Find all starting indices of substring(s) in ",(0,a.kt)("inlineCode",{parentName:"p"},"S")," that is a concatenation of each word in ",(0,a.kt)("inlineCode",{parentName:"p"},"L")," exactly once and without any intervening characters."),(0,a.kt)("p",null,"For example, given:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'S: "barfoothefoobarman"\nL: ["foo", "bar"]\n')),(0,a.kt)("p",null,"You should return the indices: ",(0,a.kt)("inlineCode",{parentName:"p"},"[0,9]"),".(order does not matter)."),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u65e0"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Substring with Concatenation of All Words\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(m)\npublic class Solution {\n    public List<Integer> findSubstring(String s, String[] words) {\n        final int wordLength = words[0].length();\n        final int catLength = wordLength * words.length;\n        List<Integer> result = new ArrayList<>();\n\n        if (s.length() < catLength) return result;\n\n        HashMap<String, Integer> wordCount = new HashMap<>();\n\n        for (String word : words)\n            wordCount.put(word, wordCount.getOrDefault(word, 0) + 1);\n\n        for (int i = 0; i <= s.length() - catLength; ++i) {\n            HashMap<String, Integer> unused = new HashMap<>(wordCount);\n\n            for (int j = i; j < i + catLength; j += wordLength) {\n                final String key = s.substring(j, j + wordLength);\n                final int pos = unused.getOrDefault(key, -1);\n\n                if (pos == -1 || pos == 0) break;\n\n                unused.put(key, pos - 1);\n                if (pos - 1 == 0) unused.remove(key);\n            }\n\n            if (unused.size() == 0) result.add(i);\n        }\n\n        return result;\n    }\n}\n"))),(0,a.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// LeetCode, Substring with Concatenation of All Words\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n*m)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(m)\nclass Solution {\npublic:\n    vector<int> findSubstring(string s, vector<string>& dict) {\n        size_t wordLength = dict.front().length();\n        size_t catLength = wordLength * dict.size();\n        vector<int> result;\n\n        if (s.length() < catLength) return result;\n\n        unordered_map<string, int> wordCount;\n\n        for (auto const& word : dict) ++wordCount[word];\n\n        for (auto i = begin(s); i <= prev(end(s), catLength); ++i) {\n            unordered_map<string, int> unused(wordCount);\n\n            for (auto j = i; j != next(i, catLength); j += wordLength) {\n                auto pos = unused.find(string(j, next(j, wordLength)));\n\n                if (pos == unused.end() || pos->second == 0) break;\n\n                if (--pos->second == 0) unused.erase(pos);\n            }\n\n            if (unused.size() == 0) result.push_back(distance(begin(s), i));\n        }\n\n        return result;\n    }\n};\n")))))}m.isMDXComponent=!0}}]);