"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3229],{3905:(e,n,a)=>{a.d(n,{Zo:()=>m,kt:()=>c});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=t.createContext({}),u=function(e){var n=t.useContext(p),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},m=function(e){var n=u(e.components);return t.createElement(p.Provider,{value:n},e.children)},s={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(a),c=r,f=d["".concat(p,".").concat(c)]||d[c]||s[c]||l;return a?t.createElement(f,i(i({ref:n},m),{},{components:a})):t.createElement(f,i({ref:n},m))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return t.createElement.apply(null,i)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5162:(e,n,a)=>{a.d(n,{Z:()=>i});var t=a(7294),r=a(6010);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:a,className:i}=e;return t.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,i),hidden:a},n)}},5488:(e,n,a)=>{a.d(n,{Z:()=>c});var t=a(7462),r=a(7294),l=a(6010),i=a(2389),o=a(7392),p=a(7094),u=a(2466);const m="tabList__CuJ",s="tabItem_LNqP";function d(e){var n,a;const{lazy:i,block:d,defaultValue:c,values:f,groupId:h,className:k}=e,v=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:v.map((e=>{let{props:{value:n,label:a,attributes:t}}=e;return{value:n,label:a,attributes:t}})),y=(0,o.l)(b,((e,n)=>e.value===n.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const g=null===c?c:null!=(n=null!=c?c:null==(a=v.find((e=>e.props.default)))?void 0:a.props.value)?n:v[0].props.value;if(null!==g&&!b.some((e=>e.value===g)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:x}=(0,p.U)(),[O,_]=(0,r.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=h){const e=N[h];null!=e&&e!==O&&b.some((n=>n.value===e))&&_(e)}const T=e=>{const n=e.currentTarget,a=w.indexOf(n),t=b[a].value;t!==O&&(C(n),_(t),null!=h&&x(h,String(t)))},M=e=>{var n;let a=null;switch(e.key){case"ArrowRight":{var t;const n=w.indexOf(e.currentTarget)+1;a=null!=(t=w[n])?t:w[0];break}case"ArrowLeft":{var r;const n=w.indexOf(e.currentTarget)-1;a=null!=(r=w[n])?r:w[w.length-1];break}}null==(n=a)||n.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",m)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":d},k)},b.map((e=>{let{value:n,label:a,attributes:i}=e;return r.createElement("li",(0,t.Z)({role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,key:n,ref:e=>w.push(e),onKeyDown:M,onFocus:T,onClick:T},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":O===n})}),null!=a?a:n)}))),i?(0,r.cloneElement)(v.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==O})))))}function c(e){const n=(0,i.Z)();return r.createElement(d,(0,t.Z)({key:String(n)},e))}},5627:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>p,default:()=>c,frontMatter:()=>o,metadata:()=>u,toc:()=>s});var t=a(7462),r=(a(7294),a(3905)),l=a(5488),i=a(5162);const o={title:"Median of Data Stream"},p=void 0,u={unversionedId:"stack-and-queue/stack/median-of-data-stream",id:"stack-and-queue/stack/median-of-data-stream",title:"Median of Data Stream",description:"\u63cf\u8ff0",source:"@site/docs/stack-and-queue/stack/median-of-data-stream.md",sourceDirName:"stack-and-queue/stack",slug:"/stack-and-queue/stack/median-of-data-stream",permalink:"/stack-and-queue/stack/median-of-data-stream",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/stack-and-queue/stack/median-of-data-stream.md",tags:[],version:"current",frontMatter:{title:"Median of Data Stream"},sidebar:"someSidebar",previous:{title:"Implement Stack using Queues",permalink:"/stack-and-queue/stack/implement-stack-using-queues"},next:{title:"Implement Queue using Stacks",permalink:"/stack-and-queue/queue/implement-queue-using-stacks"}},m={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:s};function c(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value."),(0,r.kt)("p",null,"For example,",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"[2,3,4]"),", the median is ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("inlineCode",{parentName:"p"},"[2,3]"),", the median is ",(0,r.kt)("inlineCode",{parentName:"p"},"(2 + 3) / 2 = 2.5")),(0,r.kt)("p",null,"Design a data structure that supports the following two operations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"void addNum(int num)")," - Add a integer number from the data stream to the data structure."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"double findMedian()")," - Return the median of all elements so far.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example"),":"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"addNum(1)",(0,r.kt)("br",{parentName:"p"}),"\n","addNum(2)",(0,r.kt)("br",{parentName:"p"}),"\n","findMedian() -> 1.5",(0,r.kt)("br",{parentName:"p"}),"\n","addNum(3)",(0,r.kt)("br",{parentName:"p"}),"\n","findMedian() -> 2")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If all integer numbers from the stream are between 0 and 100, how would you optimize it?"),(0,r.kt)("li",{parentName:"ol"},"If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?")),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u6c42\u4e2d\u4f4d\u6570\uff0c\u6700\u76f4\u89c2\u7684\u65b9\u6cd5\u662f\u628a\u6570\u7ec4\u6392\u5e8f\uff0c\u7136\u540e ",(0,r.kt)("inlineCode",{parentName:"p"},"n/2")," \u4f4d\u7f6e\u7684\u6570\u5c31\u662f\u4e2d\u4f4d\u6570\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"addNum()"),"\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1), ",(0,r.kt)("inlineCode",{parentName:"p"},"findMedian()"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f n(logn)\u3002"),(0,r.kt)("p",null,"\u4e3a\u4e86\u63d0\u9ad8 ",(0,r.kt)("inlineCode",{parentName:"p"},"findMedian()"),"\u7684\u901f\u5ea6\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 ",(0,r.kt)("inlineCode",{parentName:"p"},"addNum()"),"\u6e90\u6e90\u4e0d\u65ad\u63d2\u5165\u65b0\u5143\u7d20\u7684\u65f6\u5019\uff0c\u4f7f\u7528\u63d2\u5165\u6392\u5e8f\uff0c\u4fdd\u8bc1\u6570\u7ec4\u662f\u5df2\u7ecf\u6392\u5e8f\u597d\u4e86\u7684\uff0c\u8fd9\u6837 ",(0,r.kt)("inlineCode",{parentName:"p"},"findMedian()"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1), ",(0,r.kt)("inlineCode",{parentName:"p"},"addNum()"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn)+O(n)=O(n)\uff0c\u56e0\u4e3a\u4e8c\u5206\u67e5\u627e\u63d2\u5165\u4f4d\u7f6e\u9700\u8981 O(logn)\uff0c\u540e\u9762\u7684\u5143\u7d20\u5168\u90e8\u5e73\u79fb\u9700\u8981 O(n)\u3002"),(0,r.kt)("p",null,"\u5bf9\u4e8e\u67e5\u627e\u4e2d\u4f4d\u6570\u8fd9\u4e2a\u9700\u6c42\uff0c\u628a\u6574\u4e2a\u6570\u7ec4\u6392\u5e8f\u6709\u70b9\u8ba1\u7b97\u8fc7\u5934\u4e86\uff0c\u56e0\u6b64\u80af\u5b9a\u4e0d\u662f\u6700\u5feb\u7684\u3002\u4e0b\u9762\u5f00\u59cb\u8ba8\u8bba\u4e00\u79cd\u66f4\u5feb\u7684\u65b9\u6cd5\u3002"),(0,r.kt)("p",null,"\u53ef\u4ee5\u4f7f\u7528\u4e24\u4e2a\u5806\uff0c\u4e00\u4e2a\u5927\u6839\u5806\uff0c\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u5927\u6839\u5806\u5b58\u653e\u8f83\u5c0f\u7684\u4e00\u534a\u5143\u7d20\uff0c\u5c0f\u6839\u5806\u5b58\u653e\u8f83\u5927\u7684\u4e00\u534a\u5143\u7d20\uff0c\u7ef4\u6301\u4e24\u4e2a\u5806\u7684\u5927\u5c0f\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u5806\u7684\u6839\u8282\u70b9\u5c31\u662f\u4e2d\u4f4d\u6570\u3002\u5f53 n \u4e3a\u5947\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u5c31\u662f\u5927\u6839\u5806\u7684\u6839\u8282\u70b9\uff0c\u5f53 n \u4e3a\u5076\u6570\u65f6\uff0c\u4e2d\u4f4d\u6570\u5c31\u662f\u4e24\u4e2a\u5806\u7684\u6839\u8282\u70b9\u4e4b\u548c\u9664\u4ee5 2\u3002",(0,r.kt)("inlineCode",{parentName:"p"},"addNum()"),"\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(logn), ",(0,r.kt)("inlineCode",{parentName:"p"},"findMedian()"),"\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f O(1)\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)(l.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.kt)(i.Z,{value:"python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# Median of Data Stream\n# Using two heaps\n# Overall Space Complexity: O(n)\nclass MedianFinder:\n\n    def __init__(self):\n        self.min_heap = []\n        self.max_heap = []\n\n    def addNum(self, num: int) -> None:\n        """Time Complexity: O(logn)"""\n        root = heapq.heappushpop(self.max_heap,-num)\n        heapq.heappush(self.min_heap, -root)\n        while len(self.max_heap) < len(self.min_heap):\n            root = heapq.heappop(self.min_heap)\n            heapq.heappush(self.max_heap, -root)\n\n    def findMedian(self) -> float:\n        """Time Complexity: O(1)"""\n        if len(self.max_heap) == len(self.min_heap):\n            return (-self.max_heap[0]  + self.min_heap[0])/2\n        else:\n            return -self.max_heap[0]\n'))),(0,r.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Median of Data Stream\n// Using two heaps\n// Overall Space Complexity: O(n)\nclass MedianFinder {\n    private PriorityQueue<Integer> maxHeap;\n    private PriorityQueue<Integer> minHeap;\n\n    public MedianFinder() {\n        maxHeap = new PriorityQueue<>();\n        minHeap = new PriorityQueue<>((a,b) ->  -1 * Integer.compare(a, b));\n    }\n\n    // Time Complexity: O(logn)\n    public void addNum(int num) {\n        maxHeap.offer(num);\n\n        minHeap.offer(maxHeap.poll());\n\n        if (maxHeap.size() < minHeap.size()) {\n            maxHeap.offer(minHeap.poll());\n        }\n    }\n\n    // Time Complexity: O(1)\n    public double findMedian() {\n        if (maxHeap.size() == minHeap.size()) {\n            return (maxHeap.peek() + minHeap.peek()) * 0.5;\n        } else {\n            return maxHeap.peek();\n        }\n    }\n}\n"))),(0,r.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// Median of Data Stream\n// Using two heaps\n// Overall Space Complexity: O(n)\nclass MedianFinder {\n    priority_queue<int> max_heap;\n    priority_queue<int, vector<int>, greater<int>> min_heap;\n\npublic:\n    // Time Complexity: O(logn)\n    void addNum(int num) {\n        max_heap.push(num);\n\n        min_heap.push(max_heap.top());\n        max_heap.pop();\n\n        if (max_heap.size() < min_heap.size()) {\n            max_heap.push(min_heap.top());\n            min_heap.pop();\n        }\n    }\n\n    // Time Complexity: O(1)\n    double findMedian() {\n        if (max_heap.size() == min_heap.size()) {\n            return (max_heap.top() + min_heap.top()) * 0.5;\n        } else {\n            return max_heap.top();\n        }\n    }\n};\n")))),(0,r.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"../queue/moving-average-of-data-stream"},"Moving Average of Data Stream"))))}c.isMDXComponent=!0}}]);