"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1456],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>v});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,l=e.originalType,u=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),v=o,f=d["".concat(u,".").concat(v)]||d[v]||s[v]||l;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var l=n.length,a=new Array(l);a[0]=d;var i={};for(var u in t)hasOwnProperty.call(t,u)&&(i[u]=t[u]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<l;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(7294),o=n(6010);const l="tabItem_Ymn6";function a(e){let{children:t,hidden:n,className:a}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(l,a),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>v});var r=n(7462),o=n(7294),l=n(6010),a=n(2389),i=n(7392),u=n(7094),p=n(2466);const c="tabList__CuJ",s="tabItem_LNqP";function d(e){var t;const{lazy:n,block:a,defaultValue:d,values:v,groupId:f,className:m}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),b=v??h.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),g=(0,i.l)(b,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===d?d:d??(null==(t=h.find((e=>e.props.default)))?void 0:t.props.value)??h[0].props.value;if(null!==y&&!b.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${b.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:x}=(0,u.U)(),[N,T]=(0,o.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:P}=(0,p.o5)();if(null!=f){const e=k[f];null!=e&&e!==N&&b.some((t=>t.value===e))&&T(e)}const E=e=>{const t=e.currentTarget,n=O.indexOf(t),r=b[n].value;r!==N&&(P(t),T(r),null!=f&&x(f,String(r)))},w=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,l.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":a},m)},b.map((e=>{let{value:t,label:n,attributes:a}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:e=>O.push(e),onKeyDown:w,onFocus:E,onClick:E},a,{className:(0,l.Z)("tabs__item",s,null==a?void 0:a.className,{"tabs__item--active":N===t})}),n??t)}))),n?(0,o.cloneElement)(h.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==N})))))}function v(e){const t=(0,a.Z)();return o.createElement(d,(0,r.Z)({key:String(t)},e))}},5305:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>u,default:()=>v,frontMatter:()=>i,metadata:()=>p,toc:()=>s});var r=n(7462),o=(n(7294),n(3905)),l=n(5488),a=n(5162);const i={title:"Populating Next Right Pointers in Each Node II"},u=void 0,p={unversionedId:"binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",id:"binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",title:"Populating Next Right Pointers in Each Node II",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii.md",sourceDirName:"binary-tree/traversal",slug:"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",permalink:"/binary-tree/traversal/populating-next-right-pointers-in-each-node-ii",draft:!1,tags:[],version:"current",frontMatter:{title:"Populating Next Right Pointers in Each Node II"},sidebar:"docs",previous:{title:"Flatten Binary Tree to Linked List",permalink:"/binary-tree/traversal/flatten-binary-tree-to-linked-list"},next:{title:"Construct Binary Tree from Preorder and Inorder Traversal",permalink:"/binary-tree/construction/construct-binary-tree-from-preorder-and-inorder-traversal"}},c={},s=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52\u7248",id:"\u9012\u5f52\u7248",level:3},{value:"\u8fed\u4ee3\u7248",id:"\u8fed\u4ee3\u7248",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:s};function v(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.kt)("p",null,'Follow up for problem "Populating Next Right Pointers in Each Node".'),(0,o.kt)("p",null,"What if the given tree could be any binary tree? Would your previous solution still work?"),(0,o.kt)("p",null,"Note: You may only use constant extra space."),(0,o.kt)("p",null,"For example,\nGiven the following binary tree,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"         1\n       /  \\\n      2    3\n     / \\    \\\n    4   5    7\n")),(0,o.kt)("p",null,"After calling your function, the tree should look like:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"         1 -> NULL\n       /  \\\n      2 -> 3 -> NULL\n     / \\    \\\n    4-> 5 -> 7 -> NULL\n")),(0,o.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.kt)("p",null,"\u8981\u5904\u7406\u4e00\u4e2a\u8282\u70b9\uff0c\u53ef\u80fd\u9700\u8981\u6700\u53f3\u8fb9\u7684\u5144\u5f1f\u8282\u70b9\uff0c\u9996\u5148\u60f3\u5230\u7528\u5e7f\u641c\u3002\u4f46\u5e7f\u641c\u4e0d\u662f\u5e38\u6570\u7a7a\u95f4\u7684\uff0c\u672c\u9898\u8981\u6c42\u5e38\u6570\u7a7a\u95f4\u3002"),(0,o.kt)("p",null,"\u6ce8\u610f\uff0c\u8fd9\u9898\u7684\u4ee3\u7801\u539f\u5c01\u4e0d\u52a8\uff0c\u4e5f\u53ef\u4ee5\u89e3\u51b3 Populating Next Right Pointers in Each Node I."),(0,o.kt)("h3",{id:"\u9012\u5f52\u7248"},"\u9012\u5f52\u7248"),(0,o.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(a.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        if (root == null) return;\n\n        TreeLinkNode dummy = new TreeLinkNode(-1);\n        for (TreeLinkNode curr = root, prev = dummy;\n                curr != null; curr = curr.next) {\n            if (curr.left != null){\n                prev.next = curr.left;\n                prev = prev.next;\n            }\n            if (curr.right != null){\n                prev.next = curr.right;\n                prev = prev.next;\n            }\n        }\n        connect(dummy.next);\n    }\n}\n"))),(0,o.kt)(a.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        if (root == nullptr) return;\n\n        TreeLinkNode dummy(-1);\n        for (TreeLinkNode *curr = root, *prev = &dummy;\n                curr; curr = curr->next) {\n            if (curr->left != nullptr){\n                prev->next = curr->left;\n                prev = prev->next;\n            }\n            if (curr->right != nullptr){\n                prev->next = curr->right;\n                prev = prev->next;\n            }\n        }\n        connect(dummy.next);\n    }\n};\n")))),(0,o.kt)("h3",{id:"\u8fed\u4ee3\u7248"},"\u8fed\u4ee3\u7248"),(0,o.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(a.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public void connect(TreeLinkNode root) {\n        while (root!= null ) {\n            TreeLinkNode next = null; // the first node of next level\n            TreeLinkNode prev = null; // previous node on the same level\n            for (; root != null; root = root.next) {\n                if (next == null) next = root.left != null ? root.left : root.right;\n\n                if (root.left != null) {\n                    if (prev != null) prev.next = root.left;\n                    prev = root.left;\n                }\n                if (root.right != null) {\n                    if (prev != null) prev.next = root.right;\n                    prev = root.right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n}\n"))),(0,o.kt)(a.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Populating Next Right Pointers in Each Node II\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    void connect(TreeLinkNode *root) {\n        while (root) {\n            TreeLinkNode * next = nullptr; // the first node of next level\n            TreeLinkNode * prev = nullptr; // previous node on the same level\n            for (; root; root = root->next) {\n                if (!next) next = root->left ? root->left : root->right;\n\n                if (root->left) {\n                    if (prev) prev->next = root->left;\n                    prev = root->left;\n                }\n                if (root->right) {\n                    if (prev) prev->next = root->right;\n                    prev = root->right;\n                }\n            }\n            root = next; // turn to next level\n        }\n    }\n};\n")))),(0,o.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/binary-tree/recursion/populating-next-right-pointers-in-each-node"},"Populating Next Right Pointers in Each Node"))))}v.isMDXComponent=!0}}]);