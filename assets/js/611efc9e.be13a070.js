"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[4615],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),l=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,v=c["".concat(u,".").concat(d)]||c[d]||m[d]||i;return n?r.createElement(v,s(s({ref:t},p),{},{components:n})):r.createElement(v,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=c;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var l=2;l<i;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(7462),a=n(7294),i=n(6010),s=n(2389),o=n(7392),u=n(7094),l=n(2466);const p="tabList__CuJ",m="tabItem_LNqP";function c(e){var t;const{lazy:n,block:s,defaultValue:c,values:d,groupId:v,className:f}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??b.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),g=(0,o.l)(h,((e,t)=>e.value===t.value));if(g.length>0)throw new Error(`Docusaurus error: Duplicate values "${g.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===c?c:c??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:w}=(0,u.U)(),[x,N]=(0,a.useState)(y),O=[],{blockElementScrollPositionUntilNextRender:_}=(0,l.o5)();if(null!=v){const e=k[v];null!=e&&e!==x&&h.some((t=>t.value===e))&&N(e)}const T=e=>{const t=e.currentTarget,n=O.indexOf(t),r=h[n].value;r!==x&&(_(t),N(r),null!=v&&w(v,String(r)))},j=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=O.indexOf(e.currentTarget)+1;n=O[t]??O[0];break}case"ArrowLeft":{const t=O.indexOf(e.currentTarget)-1;n=O[t]??O[O.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":s},f)},h.map((e=>{let{value:t,label:n,attributes:s}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:e=>O.push(e),onKeyDown:j,onFocus:T,onClick:T},s,{className:(0,i.Z)("tabs__item",m,null==s?void 0:s.className,{"tabs__item--active":x===t})}),n??t)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===x))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==x})))))}function d(e){const t=(0,s.Z)();return a.createElement(c,(0,r.Z)({key:String(t)},e))}},2209:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var r=n(7462),a=(n(7294),n(3905)),i=n(5488),s=n(5162);const o={title:"Permutations"},u=void 0,l={unversionedId:"brute-force/permutations",id:"brute-force/permutations",title:"Permutations",description:"\u63cf\u8ff0",source:"@site/docs/brute-force/permutations.md",sourceDirName:"brute-force",slug:"/brute-force/permutations",permalink:"/brute-force/permutations",draft:!1,tags:[],version:"current",frontMatter:{title:"Permutations"},sidebar:"docs",previous:{title:"Subsets II",permalink:"/brute-force/subsets-ii"},next:{title:"Permutations II",permalink:"/brute-force/permutations-ii"}},p={},m=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:4},{value:"next_permutation()",id:"next_permutation",level:4},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],c={toc:m};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a collection of numbers, return all possible permutations."),(0,a.kt)("p",null,"For example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"[1,2,3]")," have the following permutations:\n",(0,a.kt)("inlineCode",{parentName:"p"},"[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2]"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"[3,2,1]"),"."),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)("h4",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Permutations\n// Recursive\n// Time Complexity: O(n!), Space Complexity: O(n)\npublic class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        Arrays.sort(nums);\n        List<List<Integer>> result = new ArrayList<>();\n        dfs(nums, 0, result);\n        return result;\n    }\n\n    private static void dfs(int[] nums, int start, List<List<Integer>> result) {\n        if (start == nums.length) {\n            result.add(Arrays.stream(nums).boxed().collect(Collectors.toList()));\n            return;\n        }\n\n        for (int i = start; i < nums.length; i++) {\n            swap(nums, start, i);\n            dfs(nums, start + 1, result);\n            swap(nums, start, i); // restore\n        }\n    }\n\n    private static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n}\n"))),(0,a.kt)(s.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Permutations\n// \u6df1\u641c\uff0c\u589e\u91cf\u6784\u9020\u6cd5\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > permute(vector<int>& num) {\n        sort(num.begin(), num.end());\n\n        vector<vector<int>> result;\n        vector<int> path;  // \u4e2d\u95f4\u7ed3\u679c\n\n        dfs(num, path, result);\n        return result;\n    }\nprivate:\n    void dfs(const vector<int>& num, vector<int> &path,\n            vector<vector<int> > &result) {\n        if (path.size() == num.size()) {  // \u6536\u655b\u6761\u4ef6\n            result.push_back(path);\n            return;\n        }\n\n        // \u6269\u5c55\u72b6\u6001\n        for (auto i : num) {\n            // \u67e5\u627e i \u662f\u5426\u5728path \u4e2d\u51fa\u73b0\u8fc7\n            auto pos = find(path.begin(), path.end(), i);\n\n            if (pos == path.end()) {\n                path.push_back(i);\n                dfs(num, path, result);\n                path.pop_back();\n            }\n        }\n    }\n};\n")))),(0,a.kt)("h4",{id:"next_permutation"},"next_permutation()"),(0,a.kt)("p",null,"\u51fd\u6570 ",(0,a.kt)("inlineCode",{parentName:"p"},"next_permutation()"),"\u7684\u5177\u4f53\u5b9e\u73b0\u89c1\u8fd9\u8282 ",(0,a.kt)("a",{parentName:"p",href:"/array/next-permutation"},"Next Permutation"),"\u3002"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(s.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Permutations\n// \u91cd\u65b0\u5b9e\u73b0 next_permutation()\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public List<List<Integer>> permute(int[] nums) {\n        List<List<Integer>> result = new ArrayList<>();\n        Arrays.sort(nums);\n\n        do {\n            ArrayList<Integer> one = new ArrayList<>();\n            for (int i : nums) {\n                one.add(i);\n            }\n            result.add(one);\n            // \u8c03\u7528\u7684\u662f 2.1.12 \u8282\u7684 next_permutation()\n            // \u800c\u4e0d\u662f std::next_permutation()\n        } while(nextPermutation(nums, 0, nums.length));\n        return result;\n    }\n    // \u4ee3\u7801\u6765\u81ea 2.1.12 \u8282\u7684 next_permutation()\n    private static boolean nextPermutation(int[] nums, int begin, int end) {\n        // From right to left, find the first digit(partitionNumber)\n        // which violates the increase trend\n        int p = end - 2;\n        while (p > -1 && nums[p] >= nums[p + 1]) --p;\n\n        // If not found, which means current sequence is already the largest\n        // permutation, then rearrange to the first permutation and return false\n        if(p == -1) {\n            reverse(nums, begin, end);\n            return false;\n        }\n\n        // From right to left, find the first digit which is greater\n        // than the partition number, call it changeNumber\n        int c = end - 1;\n        while (c > 0 && nums[c] <= nums[p]) --c;\n\n        // Swap the partitionNumber and changeNumber\n        swap(nums, p, c);\n        // Reverse all the digits on the right of partitionNumber\n        reverse(nums, p+1, end);\n        return true;\n    }\n    private static void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i] = nums[j];\n        nums[j] = tmp;\n    }\n    private static void reverse(int[] nums, int begin, int end) {\n        end--;\n        while (begin < end) {\n            swap(nums, begin++, end--);\n        }\n    }\n}\n"))),(0,a.kt)(s.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Permutations\n// \u91cd\u65b0\u5b9e\u73b0 next_permutation()\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    vector<vector<int> > permute(vector<int> &num) {\n        vector<vector<int> > result;\n        sort(num.begin(), num.end());\n\n        do {\n            result.push_back(num);\n        // \u8c03\u7528\u7684\u662f 2.1.12 \u8282\u7684 next_permutation()\n        // \u800c\u4e0d\u662f std::next_permutation()\n        } while(next_permutation(num.begin(), num.end()));\n        return result;\n    }\nprivate:\n    // \u4ee3\u7801\u6765\u81ea 2.1.12 \u8282\u7684 next_permutation()\n    void nextPermutation(vector<int> &nums) {\n        next_permutation(nums.begin(), nums.end());\n    }\n\n    template<typename BidiIt>\n    bool next_permutation(BidiIt first, BidiIt last) {\n        // Get a reversed range to simplify reversed traversal.\n        const auto rfirst = reverse_iterator<BidiIt>(last);\n        const auto rlast = reverse_iterator<BidiIt>(first);\n\n        // Begin from the second last element to the first element.\n        auto pivot = next(rfirst);\n\n        // Find `pivot`, which is the first element that is no less than its\n        // successor.  `Prev` is used since `pivort` is a `reversed_iterator`.\n        while (pivot != rlast && *pivot >= *prev(pivot))\n            ++pivot;\n\n        // No such elemenet found, current sequence is already the largest\n        // permutation, then rearrange to the first permutation and return false.\n        if (pivot == rlast) {\n            reverse(rfirst, rlast);\n            return false;\n        }\n\n        // Scan from right to left, find the first element that is greater than\n        // `pivot`.\n        auto change = find_if(rfirst, pivot, bind1st(less<int>(), *pivot));\n\n        swap(*change, *pivot);\n        reverse(rfirst, pivot);\n\n        return true;\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/array/next-permutation"},"Next Permutation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/array/permutation-sequence"},"Permutation Sequence")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/brute-force/permutations-ii"},"Permutations II")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/brute-force/combinations"},"Combinations"))))}d.isMDXComponent=!0}}]);