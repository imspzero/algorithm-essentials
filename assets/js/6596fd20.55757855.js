"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[4208],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=i.createContext({}),d=function(e){var n=i.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return i.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},c=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,f=c["".concat(s,".").concat(m)]||c[m]||u[m]||l;return t?i.createElement(f,a(a({ref:n},p),{},{components:t})):i.createElement(f,a({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=c;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,a[1]=o;for(var d=2;d<l;d++)a[d]=t[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var i=t(7462),r=(t(7294),t(3905));const l={title:"Palindrome Linked List"},a=void 0,o={unversionedId:"linear-list/linked-list/palindrome-linked-list",id:"linear-list/linked-list/palindrome-linked-list",title:"Palindrome Linked List",description:"\u63cf\u8ff0",source:"@site/docs/linear-list/linked-list/palindrome-linked-list.md",sourceDirName:"linear-list/linked-list",slug:"/linear-list/linked-list/palindrome-linked-list",permalink:"/linear-list/linked-list/palindrome-linked-list",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/linear-list/linked-list/palindrome-linked-list.md",tags:[],version:"current",frontMatter:{title:"Palindrome Linked List"},sidebar:"someSidebar",previous:{title:"All O(1) Data Structure",permalink:"/linear-list/linked-list/all-o1-data-structure"},next:{title:"Intersection of Two Linked Lists",permalink:"/linear-list/linked-list/intersection-of-two-linked-lists"}},s={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:d};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Given a singly linked list, determine if it is a palindrome."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Follow up"),":"),(0,r.kt)("p",null,"Could you do it in ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)")," time and ",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)")," space?"),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u9996\u5148\u8981\u5bfb\u627e\u4e2d\u70b9\uff0c\u539f\u7406\u662f\u4f7f\u7528\u5feb\u6162\u6307\u9488\uff0c\u6bcf\u6b21\u5feb\u6307\u9488\u8d70\u4e24\u6b65\uff0c\u6162\u6307\u9488\u8d70\u4e00\u6b65\u3002\u540c\u65f6\u8fd8\u8981\u7528\u6808\uff0c\u6bcf\u6b21\u6162\u6307\u9488\u8d70\u4e00\u6b65\uff0c\u90fd\u628a\u503c\u5b58\u5165\u6808\u4e2d\u3002\u7b49\u5feb\u6307\u9488\u8d70\u5b8c\u65f6\uff0c\u94fe\u8868\u7684\u524d\u534a\u6bb5\u90fd\u5b58\u5165\u6808\u4e2d\u4e86\u3002\u6700\u540e\u6162\u6307\u9488\u7ee7\u7eed\u5f80\u524d\u8d70\uff0c\u6bcf\u6b21\u4e0e\u6808\u9876\u5143\u7d20\u8fdb\u884c\u6bd4\u8f83\u3002\u7a7a\u95f4\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),"\u3002"),(0,r.kt)("p",null,"\u5982\u4f55\u505a\u5230\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u7a7a\u95f4\u5462\uff1f\u53ef\u4ee5\u5148\u627e\u5230\u4e2d\u70b9\uff0c\u628a\u540e\u534a\u6bb5 reverse \u4e00\u4e0b\uff0c\u7136\u540e\u6bd4\u8f83\u4e24\u4e2a\u5c0f\u94fe\u8868\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Palindrome Linked List\n// Time Complexity: O(n), Space Complexity: O(1)\npublic class Solution {\n    public boolean isPalindrome(ListNode head) {\n        if (head == null) return true;\n\n        final ListNode middle = findMiddle(head);\n        middle.next = reverse(middle.next);\n\n        ListNode p1 = head;\n        ListNode p2 = middle.next;\n        while (p1 != null && p2 != null && p1.val == p2.val) {\n            p1 = p1.next;\n            p2 = p2.next;\n        }\n        return p2 == null;\n\n    }\n    private static ListNode findMiddle(ListNode head) {\n        if (head == null) return null;\n\n        ListNode slow = head;\n        ListNode fast = head.next;\n\n        while (fast != null && fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n\n    private static ListNode reverse(ListNode head) {\n        ListNode prev = null;\n\n        while (head != null) {\n            ListNode tmp = head.next;\n            head.next = prev;\n            prev = head;\n            head = tmp;\n        }\n\n        return prev;\n    }\n}\n")))}u.isMDXComponent=!0}}]);