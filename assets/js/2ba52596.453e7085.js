"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5362],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(n),d=a,f=m["".concat(l,".").concat(d)]||m[d]||p[d]||o;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:a,i[1]=u;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const o="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var r=n(7462),a=n(7294),o=n(6010),i=n(2389),u=n(7392),l=n(7094),s=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:n,block:i,defaultValue:m,values:d,groupId:f,className:v}=e,b=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??b.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,u.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const k=null===m?m:m??(null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)??b[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${k}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:g,setTabGroupChoices:O}=(0,l.U)(),[w,I]=(0,a.useState)(k),N=[],{blockElementScrollPositionUntilNextRender:_}=(0,s.o5)();if(null!=f){const e=g[f];null!=e&&e!==w&&h.some((t=>t.value===e))&&I(e)}const P=e=>{const t=e.currentTarget,n=N.indexOf(t),r=h[n].value;r!==w&&(_(t),I(r),null!=f&&O(f,String(r)))},x=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{const t=N.indexOf(e.currentTarget)+1;n=N[t]??N[0];break}case"ArrowLeft":{const t=N.indexOf(e.currentTarget)-1;n=N[t]??N[N.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":i},v)},h.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:w===t?0:-1,"aria-selected":w===t,key:t,ref:e=>N.push(e),onKeyDown:x,onFocus:P,onClick:P},i,{className:(0,o.Z)("tabs__item",p,null==i?void 0:i.className,{"tabs__item--active":w===t})}),n??t)}))),n?(0,a.cloneElement)(b.filter((e=>e.props.value===w))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},b.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==w})))))}function d(e){const t=(0,i.Z)();return a.createElement(m,(0,r.Z)({key:String(t)},e))}},511:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>u,metadata:()=>s,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),o=n(5488),i=n(5162);const u={title:"Permutations II"},l=void 0,s={unversionedId:"brute-force/permutations-ii",id:"brute-force/permutations-ii",title:"Permutations II",description:"\u63cf\u8ff0",source:"@site/docs/brute-force/permutations-ii.md",sourceDirName:"brute-force",slug:"/brute-force/permutations-ii",permalink:"/brute-force/permutations-ii",draft:!1,tags:[],version:"current",frontMatter:{title:"Permutations II"},sidebar:"docs",previous:{title:"Permutations",permalink:"/brute-force/permutations"},next:{title:"Combinations",permalink:"/brute-force/combinations"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"next_permutation()",id:"next_permutation",level:3},{value:"\u91cd\u65b0\u5b9e\u73b0 next_permutation()",id:"\u91cd\u65b0\u5b9e\u73b0-next_permutation",level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],m={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a collection of numbers that might contain duplicates, return all possible unique permutations."),(0,a.kt)("p",null,"For example,\n",(0,a.kt)("inlineCode",{parentName:"p"},"[1,1,2]")," have the following unique permutations:\n",(0,a.kt)("inlineCode",{parentName:"p"},"[1,1,2], [1,2,1]"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"[2,1,1]"),"."),(0,a.kt)("h3",{id:"next_permutation"},"next_permutation()"),(0,a.kt)("p",null,"\u76f4\u63a5\u4f7f\u7528",(0,a.kt)("inlineCode",{parentName:"p"},"std::next_permutation()"),"\uff0c\u4ee3\u7801\u4e0e\u4e0a\u4e00\u9898\u76f8\u540c\u3002"),(0,a.kt)("h3",{id:"\u91cd\u65b0\u5b9e\u73b0-next_permutation"},"\u91cd\u65b0\u5b9e\u73b0 next_permutation()"),(0,a.kt)("p",null,"\u91cd\u65b0\u5b9e\u73b0",(0,a.kt)("inlineCode",{parentName:"p"},"std::next_permutation()"),"\uff0c\u4ee3\u7801\u4e0e\u4e0a\u4e00\u9898\u76f8\u540c\u3002"),(0,a.kt)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,a.kt)("p",null,"\u9012\u5f52\u51fd\u6570",(0,a.kt)("inlineCode",{parentName:"p"},"permute()"),"\u7684\u53c2\u6570",(0,a.kt)("inlineCode",{parentName:"p"},"p"),"\uff0c\u662f\u4e2d\u95f4\u7ed3\u679c\uff0c\u5b83\u7684\u957f\u5ea6\u53c8\u80fd\u6807\u8bb0\u5f53\u524d\u8d70\u5230\u4e86\u54ea\u4e00\u6b65\uff0c\u7528\u4e8e\u5224\u65ad\u6536\u655b\u6761\u4ef6\u3002"),(0,a.kt)("p",null,"\u6269\u5c55\u8282\u70b9\uff0c\u6bcf\u6b21\u4ece\u5c0f\u5230\u5927\uff0c\u9009\u4e00\u4e2a\u6ca1\u6709\u88ab\u7528\u5149\u7684\u5143\u7d20\uff0c\u76f4\u5230\u6240\u6709\u5143\u7d20\u88ab\u7528\u5149\u3002"),(0,a.kt)("p",null,"\u672c\u9898\u4e0d\u9700\u8981\u5224\u91cd\uff0c\u56e0\u4e3a\u72b6\u6001\u88c5\u6362\u56fe\u662f\u4e00\u9897\u6709\u5c42\u6b21\u7684\u6811\u3002"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Permutations II\n// \u6df1\u641c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        Arrays.sort(nums);  // \u5fc5\u987b\u6392\u5e8f\n        List<List<Integer>> result = new ArrayList<>(); // \u6700\u7ec8\u7ed3\u679c\n        List<Integer> path = new ArrayList<>(); // \u4e2d\u95f4\u7ed3\u679c\n\n        // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        HashMap<Integer, Integer> counterMap = new HashMap<>();\n        for (int i : nums) {\n            counterMap.put(i, counterMap.getOrDefault(i, 0) + 1);\n        }\n        // \u5c06HashMap\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\n        Pair[] counters = new Pair[counterMap.size()];\n        int i = 0;\n        for (Map.Entry<Integer, Integer> entry : counterMap.entrySet()) {\n            counters[i++] = new Pair(entry.getKey(), entry.getValue());\n        }\n        Arrays.sort(counters);\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        HashMap<Integer, Integer> selected = new HashMap<>();\n        for (Pair p : counters) {\n            selected.put(p.key, 0 );\n        }\n\n        n = nums.length;\n        permute(counters, selected, path, result);\n        return result;\n    }\n\n    private int n;\n\n    void permute(Pair[] counters, HashMap<Integer,Integer> selected,\n                 List<Integer> path, List<List<Integer>> result) {\n        if (n == path.size()) {  // \u6536\u655b\u6761\u4ef6\n            result.add(new ArrayList<>(path));\n        }\n\n        // \u6269\u5c55\u72b6\u6001\n        for (Pair counter : counters) {\n            if (selected.get(counter.key) < counter.value) {\n                path.add(counter.key);\n                selected.put(counter.key, selected.get(counter.key) + 1);\n                permute(counters, selected, path, result);\n                path.remove(path.size() - 1);\n                selected.put(counter.key, selected.get(counter.key) - 1);\n            }\n        }\n    }\n    static class Pair implements Comparable<Pair> {\n        int key;\n        int value;\n        public Pair(int key, int value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            if (this.key < o.key) return -1;\n            else if (this.key > o.key) return 1;\n            else {\n                return this.value - o.value;\n            }\n        }\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Permutations II\n// \u6df1\u641c\uff0c\u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<int> > permuteUnique(vector<int>& nums) {\n        sort(nums.begin(), nums.end());\n\n        unordered_map<int, int> count_map; // \u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u7684\u51fa\u73b0\u6b21\u6570\n        for (int i : nums) {\n            if (count_map.find(i) != count_map.end())\n                count_map[i]++;\n            else\n                count_map[i] = 1;\n        }\n\n        // \u5c06map\u91cc\u7684pair\u62f7\u8d1d\u5230\u4e00\u4e2avector\u91cc\n        vector<pair<int, int> > counters;\n        for (auto p : count_map) {\n            counters.push_back(p);\n        }\n        sort(counters.begin(), counters.end());\n\n        // \u6bcf\u4e2a\u5143\u7d20\u9009\u62e9\u4e86\u591a\u5c11\u4e2a\n        unordered_map<int, int> selected;\n        for (auto p : counters) {\n            selected[p.first] = 0;\n        }\n\n        vector<vector<int>> result; // \u6700\u7ec8\u7ed3\u679c\n        vector<int> p;  // \u4e2d\u95f4\u7ed3\u679c\n\n        n = nums.size();\n        permute(counters, selected, p, result);\n        return result;\n    }\n\nprivate:\n    size_t n;\n    typedef vector<pair<int, int> >::const_iterator Iter;\n\n    void permute(const vector<pair<int, int> > &counters,\n            unordered_map<int, int> &selected,\n            vector<int> &p, vector<vector<int> > &result) {\n        if (n == p.size()) {  // \u6536\u655b\u6761\u4ef6\n            result.push_back(p);\n        }\n\n        // \u6269\u5c55\u72b6\u6001\n        for (auto counter : counters) {\n            if (selected[counter.first] < counter.second) {\n                p.push_back(counter.first);\n                selected[counter.first]++;\n                permute(counters, selected, p, result);\n                p.pop_back(); // \u64a4\u9500\u52a8\u4f5c\uff0c\u8fd4\u56de\u4e0a\u4e00\u5c42\n                selected[counter.first]--;\n            }\n        }\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/array/next-permutation"},"Next Permutation")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/array/permutation-sequence"},"Permutation Sequence")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/brute-force/permutations"},"Permutations")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/brute-force/combinations"},"Combinations"))))}d.isMDXComponent=!0}}]);