"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[3133],{3905:(e,a,t)=>{t.d(a,{Zo:()=>i,kt:()=>N});var n=t(7294);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function p(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var l=n.createContext({}),o=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},i=function(e){var a=o(e.components);return n.createElement(l.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},u=n.forwardRef((function(e,a){var t=e.components,s=e.mdxType,r=e.originalType,l=e.parentName,i=p(e,["components","mdxType","originalType","parentName"]),u=o(t),N=s,k=u["".concat(l,".").concat(N)]||u[N]||c[N]||r;return t?n.createElement(k,m(m({ref:a},i),{},{components:t})):n.createElement(k,m({ref:a},i))}));function N(e,a){var t=arguments,s=a&&a.mdxType;if("string"==typeof e||s){var r=t.length,m=new Array(r);m[0]=u;var p={};for(var l in a)hasOwnProperty.call(a,l)&&(p[l]=a[l]);p.originalType=e,p.mdxType="string"==typeof e?e:s,m[1]=p;for(var o=2;o<r;o++)m[o]=t[o];return n.createElement.apply(null,m)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},5162:(e,a,t)=>{t.d(a,{Z:()=>m});var n=t(7294),s=t(6010);const r="tabItem_Ymn6";function m(e){let{children:a,hidden:t,className:m}=e;return n.createElement("div",{role:"tabpanel",className:(0,s.Z)(r,m),hidden:t},a)}},5488:(e,a,t)=>{t.d(a,{Z:()=>N});var n=t(7462),s=t(7294),r=t(6010),m=t(2389),p=t(7392),l=t(7094),o=t(2466);const i="tabList__CuJ",c="tabItem_LNqP";function u(e){var a,t;const{lazy:m,block:u,defaultValue:N,values:k,groupId:h,className:d}=e,b=s.Children.map(e.children,(e=>{if((0,s.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=k?k:b.map((e=>{let{props:{value:a,label:t,attributes:n}}=e;return{value:a,label:t,attributes:n}})),g=(0,p.l)(f,((e,a)=>e.value===a.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===N?N:null!=(a=null!=N?N:null==(t=b.find((e=>e.props.default)))?void 0:t.props.value)?a:b[0].props.value;if(null!==y&&!f.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:v,setTabGroupChoices:w}=(0,l.U)(),[j,O]=(0,s.useState)(y),T=[],{blockElementScrollPositionUntilNextRender:x}=(0,o.o5)();if(null!=h){const e=v[h];null!=e&&e!==j&&f.some((a=>a.value===e))&&O(e)}const E=e=>{const a=e.currentTarget,t=T.indexOf(a),n=f[t].value;n!==j&&(x(a),O(n),null!=h&&w(h,String(n)))},P=e=>{var a;let t=null;switch(e.key){case"ArrowRight":{var n;const a=T.indexOf(e.currentTarget)+1;t=null!=(n=T[a])?n:T[0];break}case"ArrowLeft":{var s;const a=T.indexOf(e.currentTarget)-1;t=null!=(s=T[a])?s:T[T.length-1];break}}null==(a=t)||a.focus()};return s.createElement("div",{className:(0,r.Z)("tabs-container",i)},s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":u},d)},f.map((e=>{let{value:a,label:t,attributes:m}=e;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:j===a?0:-1,"aria-selected":j===a,key:a,ref:e=>T.push(e),onKeyDown:P,onFocus:E,onClick:E},m,{className:(0,r.Z)("tabs__item",c,null==m?void 0:m.className,{"tabs__item--active":j===a})}),null!=t?t:a)}))),m?(0,s.cloneElement)(b.filter((e=>e.props.value===j))[0],{className:"margin-top--md"}):s.createElement("div",{className:"margin-top--md"},b.map(((e,a)=>(0,s.cloneElement)(e,{key:a,hidden:e.props.value!==j})))))}function N(e){const a=(0,m.Z)();return s.createElement(u,(0,n.Z)({key:String(a)},e))}},1679:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>N,frontMatter:()=>p,metadata:()=>o,toc:()=>c});var n=t(7462),s=(t(7294),t(3905)),r=t(5488),m=t(5162);const p={title:"Partition Equal Subset Sum"},l=void 0,o={unversionedId:"dp/knapsack-problem/partition-equal-subset-sum",id:"dp/knapsack-problem/partition-equal-subset-sum",title:"Partition Equal Subset Sum",description:"\u63cf\u8ff0",source:"@site/docs/dp/knapsack-problem/partition-equal-subset-sum.md",sourceDirName:"dp/knapsack-problem",slug:"/dp/knapsack-problem/partition-equal-subset-sum",permalink:"/dp/knapsack-problem/partition-equal-subset-sum",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dp/knapsack-problem/partition-equal-subset-sum.md",tags:[],version:"current",frontMatter:{title:"Partition Equal Subset Sum"},sidebar:"someSidebar",previous:{title:"\u80cc\u5305\u95ee\u9898\u7b80\u4ecb",permalink:"/dp/knapsack-problem/"},next:{title:"Ones and Zeroes",permalink:"/dp/knapsack-problem/ones-and-zeroes"}},i={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],u={toc:c};function N(e){let{components:a,...t}=e;return(0,s.kt)("wrapper",(0,n.Z)({},u,t,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,s.kt)("p",null,"Given a ",(0,s.kt)("strong",{parentName:"p"},"non-empty")," array nums containing ",(0,s.kt)("strong",{parentName:"p"},"only positive integers"),", find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 1"),":"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"Input"),": nums = ","[1,5,11,5]"," > ",(0,s.kt)("strong",{parentName:"p"},"Output"),": true\n",(0,s.kt)("strong",{parentName:"p"},"Explanation"),": The array can be partitioned as ","[1, 5, 5]"," and ","[11]",".")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Example 2"),":"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},(0,s.kt)("strong",{parentName:"p"},"Input"),": nums = ","[1,2,3,5]"," > ",(0,s.kt)("strong",{parentName:"p"},"Output"),": false\n",(0,s.kt)("strong",{parentName:"p"},"Explanation"),": The array cannot be partitioned into equal sum subsets.")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Constraints"),":"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"1 <= nums.length <= 200"),(0,s.kt)("li",{parentName:"ul"},"1 <= nums","[i]"," <= 100")),(0,s.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,s.kt)("p",null,"\u53ef\u4ee5\u8f6c\u6362\u6210 0-1 \u80cc\u5305\u95ee\u9898\uff0c\u66f4\u52a0\u7b80\u5316\uff0c\u53ea\u6709\u91cd\u91cf\u6ca1\u6709\u4ef7\u503c\u4fe1\u606f\u3002\u6bcf\u4e2a\u7269\u54c1 i \u7684\u91cd\u91cf\u4e3a ",(0,s.kt)("inlineCode",{parentName:"p"},"nums[i]"),"\uff0c\u4ef7\u503c\u4e3a 0\uff0c\u80cc\u5305\u80fd\u5bb9\u7eb3\u7684\u6700\u5927\u91cd\u91cf\u4e3a",(0,s.kt)("inlineCode",{parentName:"p"},"sum(nums)/2"),"\u3002\u8be5\u95ee\u9898\u5c31\u53d8\u6210\uff0c\u9009\u62e9\u82e5\u5e72\u7269\u54c1\uff0c\u80fd\u5426\u6070\u597d\u586b\u6ee1\u80cc\u5305\uff1f\u4ee4 ",(0,s.kt)("inlineCode",{parentName:"p"},"f[i][j]"),"\u8868\u793a\u524d i \u4e2a\u7269\u54c1\u80fd\u5426\u586b\u6ee1\u5bb9\u91cf\u4e3a j \u7684\u80cc\u5305\uff0c\u5219\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u4e3a:"),(0,s.kt)("p",null,(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow"},"="),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow"},"\u2228"),(0,s.kt)("mi",{parentName:"mrow"},"f"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"j"),(0,s.kt)("mo",{parentName:"mrow"},"\u2212"),(0,s.kt)("mi",{parentName:"mrow"},"W"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,s.kt)("mi",{parentName:"mrow"},"i"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"]")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"f[i][j] = f[i-1][j] \\lor f[i-1][j-W[i]]")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,s.kt)("span",{parentName:"span",className:"mrel"},"="),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2228"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.10764em"}},"f"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.05724em"}},"j"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.13889em"}},"W"),(0,s.kt)("span",{parentName:"span",className:"mopen"},"["),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal"},"i"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"]]")))))),(0,s.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,s.kt)(r.Z,{defaultValue:"java",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,s.kt)(m.Z,{value:"python",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# TODO\n"))),(0,s.kt)(m.Z,{value:"java",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},"// Partition Equal Subset Sum\n// 0-1 knapsack problem\n// Time Complexity: O(n*W), Space Complexity: O(W)\nclass Solution {\n    public boolean canPartition(int[] nums) {\n        int sum = 0;\n        for(int i : nums) sum += i;\n        if(sum % 2 != 0) return false;\n\n        int[] w = nums; // weight array\n        int W = sum / 2; // maximum weight capacity of knapsack\n\n        boolean[] f = new boolean[W + 1];\n        f[0] = true; // initialize\n\n        for(int i = 0; i < nums.length; i++) {\n            for(int j = W; j >= w[i]; --j) {\n                f[j] = f[j] || f[j-w[i]];\n            }\n        }\n        return f[W];\n    }\n}\n"))),(0,s.kt)(m.Z,{value:"cpp",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// TODO\n")))),(0,s.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("a",{parentName:"li",href:"/dp/knapsack-problem/last-stone-weight-ii"},"Last Stone Weight II"))))}N.isMDXComponent=!0}}]);