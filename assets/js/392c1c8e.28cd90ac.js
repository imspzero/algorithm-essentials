"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5437],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),f=o,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||a;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var c=2;c<a;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2682:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={title:"LCA of BST"},l=void 0,i={unversionedId:"binary-tree/bst/lca-of-bst",id:"binary-tree/bst/lca-of-bst",title:"LCA of BST",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/bst/lca-of-bst.md",sourceDirName:"binary-tree/bst",slug:"/binary-tree/bst/lca-of-bst",permalink:"/binary-tree/bst/lca-of-bst",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/binary-tree/bst/lca-of-bst.md",tags:[],version:"current",frontMatter:{title:"LCA of BST"},sidebar:"someSidebar",previous:{title:"Convert Sorted List to Binary Search Tree",permalink:"/binary-tree/bst/convert-sorted-list-to-binary-search-tree"},next:{title:"Kth Smallest Element in a BST",permalink:"/binary-tree/bst/kth-smallest-element-in-a-bst"}},s={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u89e3\u6cd5 1 \u9012\u5f52",id:"\u89e3\u6cd5-1-\u9012\u5f52",level:3},{value:"\u89e3\u6cd5 2 \u8fed\u4ee3",id:"\u89e3\u6cd5-2-\u8fed\u4ee3",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.kt)("p",null,"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"      _______6______\n       /              \\\n    ___2__          ___8__\n   /      \\        /      \\\n   1      _4       7       9\n         /  \\\n         3   5\n")),(0,o.kt)("p",null,"For example, the lowest common ancestor (LCA) of nodes 2 and 8 is 6. Another example is LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition."),(0,o.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.kt)("p",null,"\u6839\u636e\u4e8c\u53c9\u641c\u7d22\u6811\u7684\u6027\u8d28\uff0c\u4e24\u4e2a\u5b50\u8282\u70b9",(0,o.kt)("inlineCode",{parentName:"p"},"p"),",",(0,o.kt)("inlineCode",{parentName:"p"},"q"),"\u548c\u6839\u8282\u70b9",(0,o.kt)("inlineCode",{parentName:"p"},"root"),"\u7684\u5173\u7cfb\uff0c\u6709\u4ee5\u4e0b\u56db\u79cd\u60c5\u51b5\uff1a"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5728\u6811\u7684\u5de6\u5b50\u6811\u4e0a"),(0,o.kt)("li",{parentName:"ol"},"\u4e24\u4e2a\u5b50\u8282\u70b9\u90fd\u5728\u6811\u7684\u53f3\u5b50\u6811\u4e0a"),(0,o.kt)("li",{parentName:"ol"},"\u4e00\u4e2a\u5b50\u8282\u70b9\u5728\u5de6\u5b50\u6811\uff0c\u4e00\u4e2a\u5b50\u8282\u70b9\u5728\u53f3\u5b50\u6811"),(0,o.kt)("li",{parentName:"ol"},"\u4e00\u4e2a\u5b50\u8282\u70b9\u7684\u503c\u548c\u6839\u8282\u70b9\u7684\u503c\u76f8\u7b49")),(0,o.kt)("p",null,"\u4ee5\u9898\u76ee\u4e2d\u7684\u6811\u4e3a\u4f8b\uff0c\u8282\u70b9 1 \u548c\u8282\u70b9 4 \u4e3a\u60c5\u51b5 1\uff0c\u8282\u70b9 7 \u548c\u8282\u70b9 9 \u4e3a\u60c5\u51b5 2\uff0c\u8282\u70b9 1 \u548c\u8282\u70b9 7 \u4e3a\u60c5\u51b5 3\uff0c\u8282\u70b9 2 \u548c 4 \u4e3a\u60c5\u51b5 4\u3002\n\u82e5\u4e3a\u60c5\u51b5 3 \u6216 4\uff0c\u5f53\u524d\u8282\u70b9\u5373\u4e3a\u6700\u8fd1\u516c\u5171\u7956\u5148\uff0c\u82e5\u4e3a\u60c5\u51b5 1 \u6216 2\uff0c\u5219\u8fd8\u9700\u9012\u5f52\u5230\u5de6\u6216\u53f3\u5b50\u6811\u4e0a\uff0c\u7ee7\u7eed\u8fd9\u4e2a\u8fc7\u7a0b\u3002"),(0,o.kt)("p",null,"\u8be5\u7b97\u6cd5\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a",(0,o.kt)("inlineCode",{parentName:"p"},"O(h)"),"\uff0c",(0,o.kt)("inlineCode",{parentName:"p"},"h"),"\u4e3a\u6811\u7684\u9ad8\u5ea6\u3002"),(0,o.kt)("h3",{id:"\u89e3\u6cd5-1-\u9012\u5f52"},"\u89e3\u6cd5 1 \u9012\u5f52"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// LCA of BST\n// Time Complexity: O(h), Space Complexity: O(h)\npublic class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        if (root == null) return null;\n\n        if (Math.max(p.val, q.val) < root.val) {\n            return lowestCommonAncestor(root.left, p, q);\n        } else if (Math.min(p.val, q.val) > root.val) {\n            return lowestCommonAncestor(root.right, p, q);\n        } else {\n            return root;\n        }\n    }\n}\n")),(0,o.kt)("h3",{id:"\u89e3\u6cd5-2-\u8fed\u4ee3"},"\u89e3\u6cd5 2 \u8fed\u4ee3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// LCA of BST\n// Time Complexity: O(h), Space Complexity: O(1)\npublic class Solution {\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        while (root != null) {\n            if (Math.max(p.val, q.val) < root.val) {\n                root = root.left;\n            } else if (Math.min(p.val, q.val) > root.val) {\n                root = root.right;\n            } else {\n                return root;\n            }\n        }\n        return null;\n    }\n}\n")),(0,o.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/binary-tree/recursion/lca-of-binary-tree"},"LCA of Binary Tree"))))}u.isMDXComponent=!0}}]);