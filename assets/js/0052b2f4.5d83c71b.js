"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[5582],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=r.createContext({}),u=function(e){var n=r.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(o.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=u(t),d=a,f=m["".concat(o,".").concat(d)]||m[d]||c[d]||l;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<l;u++)i[u]=t[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>i});var r=t(7294),a=t(6010);const l="tabItem_Ymn6";function i(e){let{children:n,hidden:t,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,i),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>d});var r=t(7462),a=t(7294),l=t(6010),i=t(2389),s=t(7392),o=t(7094),u=t(2466);const p="tabList__CuJ",c="tabItem_LNqP";function m(e){var n,t;const{lazy:i,block:m,defaultValue:d,values:f,groupId:b,className:g}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=f?f:v.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),k=(0,s.l)(h,((e,n)=>e.value===n.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const y=null===d?d:null!=(n=null!=d?d:null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)?n:v[0].props.value;if(null!==y&&!h.some((e=>e.value===y)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+y+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:j,setTabGroupChoices:O}=(0,o.U)(),[N,x]=(0,a.useState)(y),w=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=b){const e=j[b];null!=e&&e!==N&&h.some((n=>n.value===e))&&x(e)}const T=e=>{const n=e.currentTarget,t=w.indexOf(n),r=h[t].value;r!==N&&(C(n),x(r),null!=b&&O(b,String(r)))},I=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{var r;const n=w.indexOf(e.currentTarget)+1;t=null!=(r=w[n])?r:w[0];break}case"ArrowLeft":{var a;const n=w.indexOf(e.currentTarget)-1;t=null!=(a=w[n])?a:w[w.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,l.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},g)},h.map((e=>{let{value:n,label:t,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:N===n?0:-1,"aria-selected":N===n,key:n,ref:e=>w.push(e),onKeyDown:I,onFocus:T,onClick:T},i,{className:(0,l.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":N===n})}),null!=t?t:n)}))),i?(0,a.cloneElement)(v.filter((e=>e.props.value===N))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==N})))))}function d(e){const n=(0,i.Z)();return a.createElement(m,(0,r.Z)({key:String(n)},e))}},6565:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var r=t(7462),a=(t(7294),t(3905)),l=t(5488),i=t(5162);const s={title:"Longest Increasing Subsequence"},o=void 0,u={unversionedId:"dp/longest-increasing-subsequence",id:"dp/longest-increasing-subsequence",title:"Longest Increasing Subsequence",description:"\u63cf\u8ff0",source:"@site/docs/dp/longest-increasing-subsequence.md",sourceDirName:"dp",slug:"/dp/longest-increasing-subsequence",permalink:"/dp/longest-increasing-subsequence",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dp/longest-increasing-subsequence.md",tags:[],version:"current",frontMatter:{title:"Longest Increasing Subsequence"},sidebar:"someSidebar",previous:{title:"Maximum Product Subarray",permalink:"/dp/maximum-product-subarray"},next:{title:"Palindrome Partitioning II",permalink:"/dp/palindrome-partitioning-ii"}},p={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u89e3\u6cd5 1 \u52a8\u89c4",id:"\u89e3\u6cd5-1-\u52a8\u89c4",level:3},{value:"\u89e3\u6cd5 2 Insert Position",id:"\u89e3\u6cd5-2-insert-position",level:3}],m={toc:c};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given an unsorted array of integers, find the length of longest increasing subsequence."),(0,a.kt)("p",null,"For example,"),(0,a.kt)("p",null,"Given ",(0,a.kt)("inlineCode",{parentName:"p"},"[10, 9, 2, 5, 3, 7, 101, 18]"),","),(0,a.kt)("p",null,"The longest increasing subsequence is ",(0,a.kt)("inlineCode",{parentName:"p"},"[2, 3, 7, 101]"),", therefore the length is ",(0,a.kt)("inlineCode",{parentName:"p"},"4"),". Note that there may be more than one LIS combination, it is only necessary for you to return the length."),(0,a.kt)("p",null,"Your algorithm should run in ",(0,a.kt)("inlineCode",{parentName:"p"},"O(n^2)")," complexity."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Follow up"),": Could you improve it to O(n log n) time complexity?"),(0,a.kt)("h3",{id:"\u89e3\u6cd5-1-\u52a8\u89c4"},"\u89e3\u6cd5 1 \u52a8\u89c4"),(0,a.kt)("p",null,"\u8fd9\u662f\u4e00\u4e2a\u591a\u9636\u6bb5\u51b3\u7b56\u95ee\u9898\uff0c\u6c42\u6700\u957f\uff0c\u662f\u4e00\u4e2a\u6700\u4f18\u5316\u95ee\u9898\uff0c\u7528 BFS, \u8d2a\u5fc3\u6216 DP\u3002"),(0,a.kt)("p",null,"\u5982\u679c\u7528 BFS\uff0c\u9996\u5148\u7528\u6570\u7ec4\u4e2d\u7684\u6240\u6709\u5143\u7d20\u4f5c\u4e3a\u6839\u8282\u70b9\uff0c\u5f62\u6210 n \u9897\u6811\uff0c\u6bcf\u68f5\u6811\u5f00\u59cb\u5f80\u4e0b\u6269\u5c55\uff0c\u51fa\u73b0\u9006\u5e8f\u5219\u7ec8\u6b62\uff0c\u6700\u540e\u8ba1\u7b97\u6bcf\u68f5\u6811\u7684\u9ad8\u5ea6\uff0c\u53d6\u6700\u5927\uff0c\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u3002\u7b97\u6cd5\u590d\u6742\u5ea6\u4e3a",(0,a.kt)("inlineCode",{parentName:"p"},"O(n!)"),"\u3002"),(0,a.kt)("p",null,"\u672c\u9898\u4e2d\uff0c\u4e00\u4e2a\u8282\u70b9\u5f80\u4e0b\u6269\u5c55\u7684\u65f6\u5019\uff0c\u6ca1\u6709\u4e00\u4e2a\u786e\u5b9a\u7684\u51c6\u5219\uff0c\u8ba9\u4f60\u8d70\u54ea\u4e9b\u8fb9\uff0c\u672c\u9898\u4e0d\u5177\u6709\u8d2a\u5fc3\u9009\u62e9\u6027\u8d28\uff0c\u56e0\u6b64\u4e0d\u80fd\u7528\u8d2a\u5fc3\u6cd5\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u6765\u5c1d\u8bd5\u7528 DP \u6765\u89e3\u51b3\u8fd9\u9898\u3002\u6700\u91cd\u8981\u7684\u662f\u8981\u5b9a\u4e49\u51fa\u72b6\u6001\u3002\u9996\u5148\u4ece\u72b6\u6001\u6269\u5c55\u8fd9\u65b9\u9762\u770b\uff0c\u5bf9\u4e8e\u6570\u7ec4\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5b83\u5f80\u540e\u8d70\uff0c\u51e1\u662f\u6bd4\u5b83\u5927\u7684\u5143\u7d20\uff0c\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u4e0b\u4e00\u6b65\uff0c\u56e0\u6b64\u8fd9\u91cc\u627e\u4e0d\u5230\u7a81\u7834\u53e3\u3002"),(0,a.kt)("p",null,"\u6211\u4eec\u6362\u4e00\u4e2a\u89d2\u5ea6\uff0c\u4ece\u7ed3\u679c\u6765\u5165\u624b\uff0c\u6211\u4eec\u8981\u6c42\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u4e00\u4e2a\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u80af\u5b9a\u662f\u6709\u9996\u5c3e\u4e24\u4e2a\u7aef\u70b9\u7684\uff0c\u5047\u8bbe\u6211\u4eec\u5b9a\u4e49 f","[i]"," \u4e3a\u4ee5\u7b2c",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"\u4e2a\u5143\u7d20\u4e3a\u8d77\u70b9\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u90a3\u4e48 ",(0,a.kt)("inlineCode",{parentName:"p"},"f[i]"),"\u548c",(0,a.kt)("inlineCode",{parentName:"p"},"f[j]"),"\u4e4b\u95f4\u6ca1\u6709\u5fc5\u7136\u8054\u7cfb\uff0c\u8fd9\u4e2a\u72b6\u6001\u4e0d\u597d\u7528\u3002"),(0,a.kt)("p",null,"\u5047\u8bbe\u5b9a\u4e49",(0,a.kt)("inlineCode",{parentName:"p"},"f[i]"),"\u4e3a\u4ee5\u7b2c",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"\u4e2a\u5143\u7d20\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\uff0c\u90a3\u4e48\u5982\u679c",(0,a.kt)("inlineCode",{parentName:"p"},"i<j"),"\u4e14",(0,a.kt)("inlineCode",{parentName:"p"},"nums[i]<nums[j]"),"\uff0c\u5219",(0,a.kt)("inlineCode",{parentName:"p"},"f[i]"),"\u4e00\u5b9a\u662f",(0,a.kt)("inlineCode",{parentName:"p"},"f[j]"),"\u7684\u524d\u7f00\u3002\u8fd9\u4e2a\u72b6\u6001\u80fd\u8868\u793a\u5b50\u95ee\u9898\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u53ef\u4ee5\u63a5\u7740\u6df1\u5165\u4e0b\u53bb\u3002"),(0,a.kt)("p",null,"\u73b0\u5728\u6b63\u5f0f\u5f00\u59cb\u5b9a\u4e49\uff0c\u6211\u4eec\u5b9a\u4e49\u72b6\u6001",(0,a.kt)("inlineCode",{parentName:"p"},"f[i]"),"\u4e3a\u7b2c",(0,a.kt)("inlineCode",{parentName:"p"},"i"),"\u4e2a\u5143\u7d20\u4e3a\u7ec8\u70b9\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\uff0c\u90a3\u4e48\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\u662f"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"f[j] = max{f[i], 0 <= i < j && f[i] < f[j]} + 1")),(0,a.kt)("p",null,"\u6709\u4e86\u72b6\u6001\u548c\u72b6\u6001\u8f6c\u79fb\u65b9\u7a0b\uff0c\u4ee3\u7801\u5c31\u4e0d\u96be\u5199\u4e86\u3002"),(0,a.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Longest Increasing Subsequence\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public int lengthOfLIS(int[] nums) {\n        if (nums == null || nums.length == 0) return 0;\n        // f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        int[] f = new int[nums.length];\n        Arrays.fill(f, 1);\n        int global = 1;\n        for (int j = 1; j < nums.length; ++j) {\n            for (int i = 0; i < j; ++i) {\n                if (nums[i] < nums[j]) {\n                    f[j] = Math.max(f[j], f[i] + 1);\n                }\n            }\n            global = Math.max(global, f[j]);\n        }\n        return global;\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Longest Increasing Subsequence\n// \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        if (nums.empty()) return 0;\n        // f[i]\u8868\u793a\u4ee5i\u7ed3\u5c3e\u7684\u6700\u957f\u9012\u589e\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        vector<int> f(nums.size(), 1);\n        int global = 1;\n        for (int j = 1; j < nums.size(); ++j) {\n            for (int i = 0; i < j; ++i) {\n                if (nums[i] < nums[j]) {\n                    f[j] = max(f[j], f[i] + 1);\n                }\n            }\n            global = max(global, f[j]);\n        }\n        return global;\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u89e3\u6cd5-2-insert-position"},"\u89e3\u6cd5 2 Insert Position"),(0,a.kt)("p",null,"\u672c\u9898\u6700\u540e\u6709\u4e00\u4e2a\u8fdb\u9636\u95ee\u9898\uff0c\u80fd\u4e0d\u80fd",(0,a.kt)("inlineCode",{parentName:"p"},"O(n log n)")," \u89e3\u51b3\uff1f\u6709\u3002"),(0,a.kt)("p",null,"\u7ef4\u62a4\u4e00\u4e2a\u5355\u8c03\u9012\u589e\u5e8f\u5217\uff0c\u904d\u5386\u6570\u7ec4\uff0c\u4e8c\u5206\u67e5\u627e\u6bcf\u4e00\u4e2a\u6570\u5728\u5355\u8c03\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u66ff\u6362\u4e4b\u3002"),(0,a.kt)(l.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Longest Increasing Subsequence\n// \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public int lengthOfLIS(int[] nums) {\n        ArrayList<Integer> lis = new ArrayList<>();\n        for (int x : nums) {\n            int insertPos = lowerBound(lis, 0, lis.size(), x);\n            if (insertPos >= lis.size()) {\n                lis.add(x);\n            } else {\n                lis.set(insertPos, x);\n            }\n        }\n        return lis.size();\n    }\n    private static int lowerBound (ArrayList<Integer> A,\n                                   int first, int last, int target) {\n        while (first != last) {\n            int mid = first + (last - first) / 2;\n            if (target > A.get(mid)) first = ++mid;\n            else                 last = mid;\n        }\n\n        return first;\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Longest Increasing Subsequence\n// \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    int lengthOfLIS(vector<int>& nums) {\n        vector<int> lis;\n        for (auto x : nums) {\n            int insertPos = lower_bound(lis, 0, lis.size(), x);\n            if (insertPos >= lis.size()) {\n                lis.push_back(x);\n            } else {\n                lis[insertPos] = x;\n            }\n        }\n        return lis.size();\n    }\n    int lower_bound (const vector<int>& A, int first, int last, int target) {\n        while (first != last) {\n            int mid = first + (last - first) / 2;\n            if (target > A[mid]) first = ++mid;\n            else                 last = mid;\n        }\n\n        return first;\n    }\n};\n")))))}d.isMDXComponent=!0}}]);