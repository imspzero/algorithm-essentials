"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[2064],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),m=o,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(v,l(l({ref:t},c),{},{components:n})):r.createElement(v,l({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,l=new Array(a);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var r=n(7294),o=n(6010);const a="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,l),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),o=n(7294),a=n(6010),l=n(2389),i=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",d="tabItem_LNqP";function p(e){var t,n;const{lazy:l,block:p,defaultValue:m,values:v,groupId:f,className:b}=e,h=o.Children.map(e.children,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=v?v:h.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),g=(0,i.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const N=null===m?m:null!=(t=null!=m?m:null==(n=h.find((e=>e.props.default)))?void 0:n.props.value)?t:h[0].props.value;if(null!==N&&!y.some((e=>e.value===N)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:k,setTabGroupChoices:x}=(0,s.U)(),[O,w]=(0,o.useState)(N),L=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=f){const e=k[f];null!=e&&e!==O&&y.some((t=>t.value===e))&&w(e)}const E=e=>{const t=e.currentTarget,n=L.indexOf(t),r=y[n].value;r!==O&&(T(t),w(r),null!=f&&x(f,String(r)))},I=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=L.indexOf(e.currentTarget)+1;n=null!=(r=L[t])?r:L[0];break}case"ArrowLeft":{var o;const t=L.indexOf(e.currentTarget)-1;n=null!=(o=L[t])?o:L[L.length-1];break}}null==(t=n)||t.focus()};return o.createElement("div",{className:(0,a.Z)("tabs-container",c)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":p},b)},y.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>L.push(e),onKeyDown:I,onFocus:E,onClick:E},l,{className:(0,a.Z)("tabs__item",d,null==l?void 0:l.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),l?(0,o.cloneElement)(h.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function m(e){const t=(0,l.Z)();return o.createElement(p,(0,r.Z)({key:String(t)},e))}},906:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var r=n(7462),o=(n(7294),n(3905)),a=n(5488),l=n(5162);const i={title:"Insertion Sort List"},s=void 0,u={unversionedId:"sorting/insertion-sort/insertion-sort-list",id:"sorting/insertion-sort/insertion-sort-list",title:"Insertion Sort List",description:"\u63cf\u8ff0",source:"@site/docs/sorting/insertion-sort/insertion-sort-list.md",sourceDirName:"sorting/insertion-sort",slug:"/sorting/insertion-sort/insertion-sort-list",permalink:"/sorting/insertion-sort/insertion-sort-list",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/sorting/insertion-sort/insertion-sort-list.md",tags:[],version:"current",frontMatter:{title:"Insertion Sort List"},sidebar:"someSidebar",previous:{title:"Sliding Window Maximum",permalink:"/stack-and-queue/queue/sliding-window-maximum"},next:{title:"Merge Two Sorted Arrays",permalink:"/sorting/merge-sort/merge-two-sorted-arrays"}},c={},d=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:d};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,o.kt)("p",null,"Sort a linked list using insertion sort."),(0,o.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,o.kt)("p",null,"\u65e0"),(0,o.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,o.kt)(a.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"// Insertion Sort List\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    public ListNode insertionSortList(ListNode head) {\n        ListNode dummy = new ListNode(Integer.MIN_VALUE);\n        //dummy.next = head;\n\n        for (ListNode cur = head; cur != null;) {\n            ListNode pos = findInsertPos(dummy, cur.val);\n            ListNode tmp = cur.next;\n            cur.next = pos.next;\n            pos.next = cur;\n            cur = tmp;\n        }\n        return dummy.next;\n    }\n\n    ListNode findInsertPos(ListNode head, int x) {\n        ListNode pre = null;\n        for (ListNode cur = head; cur != null && cur.val <= x;\n             pre = cur, cur = cur.next)\n            ;\n        return pre;\n    }\n}\n"))),(0,o.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// Insertion Sort List\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    ListNode *insertionSortList(ListNode *head) {\n        ListNode dummy(INT_MIN);\n        //dummy.next = head;\n\n        for (ListNode *cur = head; cur != nullptr;) {\n            auto pos = findInsertPos(&dummy, cur->val);\n            ListNode *tmp = cur->next;\n            cur->next = pos->next;\n            pos->next = cur;\n            cur = tmp;\n        }\n        return dummy.next;\n    }\n\n    ListNode* findInsertPos(ListNode *head, int x) {\n        ListNode *pre = nullptr;\n        for (ListNode *cur = head; cur != nullptr && cur->val <= x;\n            pre = cur, cur = cur->next)\n            ;\n        return pre;\n    }\n};\n")))),(0,o.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/sorting/merge-sort/sort-list"},"Sort List"))))}m.isMDXComponent=!0}}]);