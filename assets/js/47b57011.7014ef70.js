"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[962],{3905:(n,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>f});var r=t(7294);function a(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function i(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function o(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?i(Object(t),!0).forEach((function(e){a(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function l(n,e){if(null==n)return{};var t,r,a=function(n,e){if(null==n)return{};var t,r,a={},i=Object.keys(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||(a[t]=n[t]);return a}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(r=0;r<i.length;r++)t=i[r],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(a[t]=n[t])}return a}var s=r.createContext({}),u=function(n){var e=r.useContext(s),t=e;return n&&(t="function"==typeof n?n(e):o(o({},e),n)),t},c=function(n){var e=u(n.components);return r.createElement(s.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,s=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),d=u(t),f=a,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||i;return t?r.createElement(m,o(o({ref:e},c),{},{components:t})):r.createElement(m,o({ref:e},c))}));function f(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=d;var l={};for(var s in e)hasOwnProperty.call(e,s)&&(l[s]=e[s]);l.originalType=n,l.mdxType="string"==typeof n?n:a,o[1]=l;for(var u=2;u<i;u++)o[u]=t[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},5162:(n,e,t)=>{t.d(e,{Z:()=>o});var r=t(7294),a=t(6010);const i="tabItem_Ymn6";function o(n){let{children:e,hidden:t,className:o}=n;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:t},e)}},5488:(n,e,t)=>{t.d(e,{Z:()=>f});var r=t(7462),a=t(7294),i=t(6010),o=t(2389),l=t(7392),s=t(7094),u=t(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(n){var e,t;const{lazy:o,block:d,defaultValue:f,values:m,groupId:v,className:b}=n,h=a.Children.map(n.children,(n=>{if((0,a.isValidElement)(n)&&"value"in n.props)return n;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof n.type?n.type:n.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=m?m:h.map((n=>{let{props:{value:e,label:t,attributes:r}}=n;return{value:e,label:t,attributes:r}})),w=(0,l.l)(g,((n,e)=>n.value===e.value));if(w.length>0)throw new Error('Docusaurus error: Duplicate values "'+w.map((n=>n.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const j=null===f?f:null!=(e=null!=f?f:null==(t=h.find((n=>n.props.default)))?void 0:t.props.value)?e:h[0].props.value;if(null!==j&&!g.some((n=>n.value===j)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+j+'" but none of its children has the corresponding value. Available values are: '+g.map((n=>n.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:k}=(0,s.U)(),[y,C]=(0,a.useState)(j),O=[],{blockElementScrollPositionUntilNextRender:T}=(0,u.o5)();if(null!=v){const n=N[v];null!=n&&n!==y&&g.some((e=>e.value===n))&&C(n)}const _=n=>{const e=n.currentTarget,t=O.indexOf(e),r=g[t].value;r!==y&&(T(e),C(r),null!=v&&k(v,String(r)))},Q=n=>{var e;let t=null;switch(n.key){case"ArrowRight":{var r;const e=O.indexOf(n.currentTarget)+1;t=null!=(r=O[e])?r:O[0];break}case"ArrowLeft":{var a;const e=O.indexOf(n.currentTarget)-1;t=null!=(a=O[e])?a:O[O.length-1];break}}null==(e=t)||e.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},b)},g.map((n=>{let{value:e,label:t,attributes:o}=n;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:y===e?0:-1,"aria-selected":y===e,key:e,ref:n=>O.push(n),onKeyDown:Q,onFocus:_,onClick:_},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":y===e})}),null!=t?t:e)}))),o?(0,a.cloneElement)(h.filter((n=>n.props.value===y))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map(((n,e)=>(0,a.cloneElement)(n,{key:e,hidden:n.props.value!==y})))))}function f(n){const e=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(e)},n))}},2753:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>f,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=t(7462),a=(t(7294),t(3905)),i=t(5488),o=t(5162);const l={title:"N-Queens"},s=void 0,u={unversionedId:"dfs/n-queens",id:"dfs/n-queens",title:"N-Queens",description:"\u63cf\u8ff0",source:"@site/docs/dfs/n-queens.md",sourceDirName:"dfs",slug:"/dfs/n-queens",permalink:"/dfs/n-queens",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/dfs/n-queens.md",tags:[],version:"current",frontMatter:{title:"N-Queens"},sidebar:"someSidebar",previous:{title:"Unique Paths II",permalink:"/dfs/unique-paths-ii"},next:{title:"N-Queens II",permalink:"/dfs/n-queens-ii"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801 1",id:"\u4ee3\u7801-1",level:3},{value:"\u4ee3\u7801 2",id:"\u4ee3\u7801-2",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],d={toc:p};function f(n){let{components:e,...l}=n;return(0,a.kt)("wrapper",(0,r.Z)({},d,l,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"The ",(0,a.kt)("strong",{parentName:"p"},"n-queens puzzle")," is the problem of placing n queens on an ",(0,a.kt)("inlineCode",{parentName:"p"},"n \xd7 n")," chessboard such that no two queens attack each other."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Eight Queens",src:t(9205).Z,width:"256",height:"259"})),(0,a.kt)("p",null,"Given an integer ",(0,a.kt)("inlineCode",{parentName:"p"},"n"),", return all distinct solutions to the n-queens puzzle."),(0,a.kt)("p",null,"Each solution contains a distinct board configuration of the n-queens' placement, where ",(0,a.kt)("inlineCode",{parentName:"p"},"'Q'")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"'.'")," both indicate a queen and an empty space respectively."),(0,a.kt)("p",null,"For example,\nThere exist two distinct solutions to the 4-queens puzzle:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[\n [".Q..",  // Solution 1\n  "...Q",\n  "Q...",\n  "..Q."],\n\n ["..Q.",  // Solution 2\n  "Q...",\n  "...Q",\n  ".Q.."]\n]\n')),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u7ecf\u5178\u7684\u6df1\u641c\u9898\u3002"),(0,a.kt)("p",null,"\u8bbe\u7f6e\u4e00\u4e2a\u6570\u7ec4 ",(0,a.kt)("inlineCode",{parentName:"p"},"vector<int> C(n, 0)"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"C[i]")," \u8868\u793a\u7b2c i \u884c\u7687\u540e\u6240\u5728\u7684\u5217\u7f16\u53f7\uff0c\u5373\u5728\u4f4d\u7f6e ",(0,a.kt)("inlineCode",{parentName:"p"},"(i, C[i])"),"\u4e0a\u653e\u4e86\u4e00\u4e2a\u7687\u540e\uff0c\u8fd9\u6837\u7528\u4e00\u4e2a\u4e00\u7ef4\u6570\u7ec4\uff0c\u5c31\u80fd\u8bb0\u5f55\u6574\u4e2a\u68cb\u76d8\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801-1"},"\u4ee3\u7801 1"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// N-Queens\n// \u6df1\u641c+\u526a\u679d\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!*n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        List<List<String>> result = new ArrayList<>();\n        int[] C = new int[n]; // C[i]\u8868\u793a\u7b2ci\u884c\u7687\u540e\u6240\u5728\u7684\u5217\u7f16\u53f7\n        dfs(C, 0, result);\n        return result;\n    }\n    private static void dfs(int[] C, int row, List<List<String>> result) {\n        final int N = C.length;\n        if (row == N) { // \u7ec8\u6b62\u6761\u4ef6\uff0c\u4e5f\u662f\u6536\u655b\u6761\u4ef6\uff0c\u610f\u5473\u7740\u627e\u5230\u4e86\u4e00\u4e2a\u53ef\u884c\u89e3\n            List<String> solution = new ArrayList<>();\n            for (int i = 0; i < N; ++i) {\n                char[] charArray = new char[N];\n                Arrays.fill(charArray, '.');\n                for (int j = 0; j < N; ++j) {\n                    if (j == C[i]) charArray[j] = 'Q';\n                }\n                solution.add(new String(charArray));\n            }\n            result.add(solution);\n            return;\n        }\n\n        for (int j = 0; j < N; ++j) {  // \u6269\u5c55\u72b6\u6001\uff0c\u4e00\u5217\u4e00\u5217\u7684\u8bd5\n            final boolean ok = isValid(C, row, j);\n            if (!ok) continue;  // \u526a\u679d\uff0c\u5982\u679c\u975e\u6cd5\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u4e0b\u4e00\u5217\n            // \u6267\u884c\u6269\u5c55\u52a8\u4f5c\n            C[row] = j;\n            dfs(C, row + 1, result);\n            // \u64a4\u9500\u52a8\u4f5c\n            // C[row] = -1;\n        }\n    }\n\n    /**\n     * \u80fd\u5426\u5728 (row, col) \u4f4d\u7f6e\u653e\u4e00\u4e2a\u7687\u540e.\n     *\n     * @param C \u68cb\u5c40\n     * @param row \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u884c\uff0c\u524d\u9762\u7684\u884c\u90fd\u5df2\u7ecf\u653e\u4e86\u7687\u540e\u4e86\n     * @param col \u5f53\u524d\u5217\n     * @return \u80fd\u5426\u653e\u4e00\u4e2a\u7687\u540e\n     */\n    private static boolean isValid(int[] C, int row, int col) {\n        for (int i = 0; i < row; ++i) {\n            // \u5728\u540c\u4e00\u5217\n            if (C[i] == col) return false;\n            // \u5728\u540c\u4e00\u5bf9\u89d2\u7ebf\u4e0a\n            if (Math.abs(i - row) == Math.abs(C[i] - col)) return false;\n        }\n        return true;\n    }\n}\n"))),(0,a.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// N-Queens\n// \u6df1\u641c+\u526a\u679d\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!*n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string> > solveNQueens(int n) {\n        vector<vector<string> > result;\n        vector<int> C(n, -1);  // C[i]\u8868\u793a\u7b2ci\u884c\u7687\u540e\u6240\u5728\u7684\u5217\u7f16\u53f7\n        dfs(C, result, 0);\n        return result;\n    }\nprivate:\n    void dfs(vector<int> &C, vector<vector<string> > &result, int row) {\n        const int N = C.size();\n        if (row == N) { // \u7ec8\u6b62\u6761\u4ef6\uff0c\u4e5f\u662f\u6536\u655b\u6761\u4ef6\uff0c\u610f\u5473\u7740\u627e\u5230\u4e86\u4e00\u4e2a\u53ef\u884c\u89e3\n            vector<string> solution;\n            for (int i = 0; i < N; ++i) {\n                string s(N, '.');\n                for (int j = 0; j < N; ++j) {\n                    if (j == C[i]) s[j] = 'Q';\n                }\n                solution.push_back(s);\n            }\n            result.push_back(solution);\n            return;\n        }\n\n        for (int j = 0; j < N; ++j) {  // \u6269\u5c55\u72b6\u6001\uff0c\u4e00\u5217\u4e00\u5217\u7684\u8bd5\n            const bool ok = isValid(C, row, j);\n            if (!ok) continue;  // \u526a\u679d\uff0c\u5982\u679c\u975e\u6cd5\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u4e0b\u4e00\u5217\n            // \u6267\u884c\u6269\u5c55\u52a8\u4f5c\n            C[row] = j;\n            dfs(C, result, row + 1);\n            // \u64a4\u9500\u52a8\u4f5c\n            // C[row] = -1;\n        }\n    }\n\n    /**\n     * \u80fd\u5426\u5728 (row, col) \u4f4d\u7f6e\u653e\u4e00\u4e2a\u7687\u540e.\n     *\n     * @param C \u68cb\u5c40\n     * @param row \u5f53\u524d\u6b63\u5728\u5904\u7406\u7684\u884c\uff0c\u524d\u9762\u7684\u884c\u90fd\u5df2\u7ecf\u653e\u4e86\u7687\u540e\u4e86\n     * @param col \u5f53\u524d\u5217\n     * @return \u80fd\u5426\u653e\u4e00\u4e2a\u7687\u540e\n     */\n    bool isValid(const vector<int> &C, int row, int col) {\n        for (int i = 0; i < row; ++i) {\n            // \u5728\u540c\u4e00\u5217\n            if (C[i] == col) return false;\n            // \u5728\u540c\u4e00\u5bf9\u89d2\u7ebf\u4e0a\n            if (abs(i - row) == abs(C[i] - col)) return false;\n        }\n        return true;\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u4ee3\u7801-2"},"\u4ee3\u7801 2"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// N-Queens\n// \u6df1\u641c+\u526a\u679d\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public List<List<String>> solveNQueens(int n) {\n        this.columns = new boolean[n];\n        this.main_diag = new boolean[2 * n - 1];\n        this.anti_diag = new boolean[2 * n - 1];\n\n        List<List<String>> result = new ArrayList<>();\n        int[] C = new int[n];\n        Arrays.fill(C, -1); // C[i]\u8868\u793a\u7b2ci\u884c\u7687\u540e\u6240\u5728\u7684\u5217\u7f16\u53f7\n        dfs(C, 0, result);\n        return result;\n    }\n\n\n    private void dfs(int[] C, int row, List<List<String>> result) {\n        final int N = C.length;\n        if (row == N) { // \u7ec8\u6b62\u6761\u4ef6\uff0c\u4e5f\u662f\u6536\u655b\u6761\u4ef6\uff0c\u610f\u5473\u7740\u627e\u5230\u4e86\u4e00\u4e2a\u53ef\u884c\u89e3\n            List<String> solution = new ArrayList<>();\n            for (int i = 0; i < N; ++i) {\n                char[] charArray = new char[N];\n                Arrays.fill(charArray, '.');\n                for (int j = 0; j < N; ++j) {\n                    if (j == C[i]) charArray[j] = 'Q';\n                }\n                solution.add(new String(charArray));\n            }\n            result.add(solution);\n            return;\n        }\n\n        for (int j = 0; j < N; ++j) {  // \u6269\u5c55\u72b6\u6001\uff0c\u4e00\u5217\u4e00\u5217\u7684\u8bd5\n            final boolean ok = !columns[j] && !main_diag[row - j + N - 1]  &&\n                    !anti_diag[row + j];\n            if (!ok) continue;  // \u526a\u679d\uff0c\u5982\u679c\u975e\u6cd5\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u4e0b\u4e00\u5217\n            // \u6267\u884c\u6269\u5c55\u52a8\u4f5c\n            C[row] = j;\n            columns[j] = main_diag[row - j + N - 1] = anti_diag[row + j] = true;\n            dfs(C, row + 1, result);\n            // \u64a4\u9500\u52a8\u4f5c\n            // C[row] = -1;\n            columns[j] = main_diag[row - j + N - 1] = anti_diag[row + j] = false;\n        }\n    }\n    // \u8fd9\u4e09\u4e2a\u53d8\u91cf\u7528\u4e8e\u526a\u679d\n    private boolean[] columns;  // \u8868\u793a\u5df2\u7ecf\u653e\u7f6e\u7684\u7687\u540e\u5360\u636e\u4e86\u54ea\u4e9b\u5217\n    private boolean[] main_diag;  // \u5360\u636e\u4e86\u54ea\u4e9b\u4e3b\u5bf9\u89d2\u7ebf\n    private boolean[] anti_diag;  // \u5360\u636e\u4e86\u54ea\u4e9b\u526f\u5bf9\u89d2\u7ebf\n}\n"))),(0,a.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// N-Queens\n// \u6df1\u641c+\u526a\u679d\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n!)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    vector<vector<string> > solveNQueens(int n) {\n        this->columns = vector<bool>(n, false);\n        this->main_diag = vector<bool>(2 * n - 1, false);\n        this->anti_diag = vector<bool>(2 * n - 1, false);\n\n        vector<vector<string> > result;\n        vector<int> C(n, -1);  // C[i]\u8868\u793a\u7b2ci\u884c\u7687\u540e\u6240\u5728\u7684\u5217\u7f16\u53f7\n        dfs(C, result, 0);\n        return result;\n    }\nprivate:\n    // \u8fd9\u4e09\u4e2a\u53d8\u91cf\u7528\u4e8e\u526a\u679d\n    vector<bool> columns;  // \u8868\u793a\u5df2\u7ecf\u653e\u7f6e\u7684\u7687\u540e\u5360\u636e\u4e86\u54ea\u4e9b\u5217\n    vector<bool> main_diag;  // \u5360\u636e\u4e86\u54ea\u4e9b\u4e3b\u5bf9\u89d2\u7ebf\n    vector<bool> anti_diag;  // \u5360\u636e\u4e86\u54ea\u4e9b\u526f\u5bf9\u89d2\u7ebf\n\n    void dfs(vector<int> &C, vector<vector<string> > &result, int row) {\n        const int N = C.size();\n        if (row == N) { // \u7ec8\u6b62\u6761\u4ef6\uff0c\u4e5f\u662f\u6536\u655b\u6761\u4ef6\uff0c\u610f\u5473\u7740\u627e\u5230\u4e86\u4e00\u4e2a\u53ef\u884c\u89e3\n            vector<string> solution;\n            for (int i = 0; i < N; ++i) {\n                string s(N, '.');\n                for (int j = 0; j < N; ++j) {\n                    if (j == C[i]) s[j] = 'Q';\n                }\n                solution.push_back(s);\n            }\n            result.push_back(solution);\n            return;\n        }\n\n        for (int j = 0; j < N; ++j) {  // \u6269\u5c55\u72b6\u6001\uff0c\u4e00\u5217\u4e00\u5217\u7684\u8bd5\n            const bool ok = !columns[j] && !main_diag[row - j + N - 1]  &&\n                    !anti_diag[row + j];\n            if (!ok) continue;  // \u526a\u679d\uff0c\u5982\u679c\u975e\u6cd5\uff0c\u7ee7\u7eed\u5c1d\u8bd5\u4e0b\u4e00\u5217\n            // \u6267\u884c\u6269\u5c55\u52a8\u4f5c\n            C[row] = j;\n            columns[j] = main_diag[row - j + N - 1] = anti_diag[row + j] = true;\n            dfs(C, result, row + 1);\n            // \u64a4\u9500\u52a8\u4f5c\n            // C[row] = -1;\n            columns[j] = main_diag[row - j + N - 1] = anti_diag[row + j] = false;\n        }\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/dfs/n-queens-ii"},"N-Queens II"))))}f.isMDXComponent=!0},9205:(n,e,t)=>{t.d(e,{Z:()=>r});const r=t.p+"assets/images/8-queens-b485b6083f2778f1ebbee5bf753c991a.png"}}]);