"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7014],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),h=r,d=m["".concat(s,".").concat(h)]||m[h]||c[h]||l;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,o=new Array(l);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,o[1]=i;for(var p=2;p<l;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(7294),r=n(6010);const l="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>h});var a=n(7462),r=n(7294),l=n(6010),o=n(2389),i=n(7392),s=n(7094),p=n(2466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){var t,n;const{lazy:o,block:m,defaultValue:h,values:d,groupId:b,className:f}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=d?d:k.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),g=(0,i.l)(y,((e,t)=>e.value===t.value));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const v=null===h?h:null!=(t=null!=h?h:null==(n=k.find((e=>e.props.default)))?void 0:n.props.value)?t:k[0].props.value;if(null!==v&&!y.some((e=>e.value===v)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+v+'" but none of its children has the corresponding value. Available values are: '+y.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:N}=(0,s.U)(),[T,x]=(0,r.useState)(v),P=[],{blockElementScrollPositionUntilNextRender:I}=(0,p.o5)();if(null!=b){const e=w[b];null!=e&&e!==T&&y.some((t=>t.value===e))&&x(e)}const O=e=>{const t=e.currentTarget,n=P.indexOf(t),a=y[n].value;a!==T&&(I(t),x(a),null!=b&&N(b,String(a)))},z=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var a;const t=P.indexOf(e.currentTarget)+1;n=null!=(a=P[t])?a:P[0];break}case"ArrowLeft":{var r;const t=P.indexOf(e.currentTarget)-1;n=null!=(r=P[t])?r:P[P.length-1];break}}null==(t=n)||t.focus()};return r.createElement("div",{className:(0,l.Z)("tabs-container",u)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":m},f)},y.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>P.push(e),onKeyDown:z,onFocus:O,onClick:O},o,{className:(0,l.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),o?(0,r.cloneElement)(k.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function h(e){const t=(0,o.Z)();return r.createElement(m,(0,a.Z)({key:String(t)},e))}},1097:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>c});var a=n(7462),r=(n(7294),n(3905)),l=n(5488),o=n(5162);const i={title:"The Maze III"},s=void 0,p={unversionedId:"bfs/the-maze-iii",id:"bfs/the-maze-iii",title:"The Maze III",description:"\u63cf\u8ff0",source:"@site/docs/bfs/the-maze-iii.md",sourceDirName:"bfs",slug:"/bfs/the-maze-iii",permalink:"/bfs/the-maze-iii",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/bfs/the-maze-iii.md",tags:[],version:"current",frontMatter:{title:"The Maze III"},sidebar:"someSidebar",previous:{title:"The Maze II",permalink:"/bfs/the-maze-ii"},next:{title:"\u5c0f\u7ed3",permalink:"/bfs/bfs-summary"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],m={toc:c};function h(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"There is a ",(0,r.kt)("strong",{parentName:"p"},"ball")," in a maze with empty spaces and walls. The ball can go through empty spaces by rolling ",(0,r.kt)("strong",{parentName:"p"},"up")," (u), ",(0,r.kt)("strong",{parentName:"p"},"down")," (d), ",(0,r.kt)("strong",{parentName:"p"},"left")," (l) or ",(0,r.kt)("strong",{parentName:"p"},"right")," (r), but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a ",(0,r.kt)("strong",{parentName:"p"},"hole")," in this maze. The ball will drop into the hole if it rolls on to the hole."),(0,r.kt)("p",null,"Given the ",(0,r.kt)("strong",{parentName:"p"},"ball position"),", the ",(0,r.kt)("strong",{parentName:"p"},"hole position")," and the ",(0,r.kt)("strong",{parentName:"p"},"maze"),", find out how the ball could drop into the hole by moving the shortest distance. The distance is defined by the number of ",(0,r.kt)("strong",{parentName:"p"},"empty spaces")," traveled by the ball from the start position (excluded) to the hole (included). Output the moving ",(0,r.kt)("strong",{parentName:"p"},"directions")," by using 'u', 'd', 'l' and 'r'. Since there could be several different shortest ways, you should output the ",(0,r.kt)("strong",{parentName:"p"},"lexicographically smallest"),' way. If the ball cannot reach the hole, output "impossible".'),(0,r.kt)("p",null,"The maze is represented by a binary 2D array. 1 means the wall and 0 means the empty space. You may assume that the borders of the maze are all walls. The ball and the hole coordinates are represented by row and column indexes."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 1"),":"),(0,r.kt)("img",{src:"/img/maze_2_example_1.png",width:"70%"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Input 1"),": a maze represented by a 2D array"),(0,r.kt)("p",{parentName:"blockquote"},"0 0 0 0 0",(0,r.kt)("br",{parentName:"p"}),"\n","1 1 0 0 1",(0,r.kt)("br",{parentName:"p"}),"\n","0 0 0 0 0",(0,r.kt)("br",{parentName:"p"}),"\n","0 1 0 0 1",(0,r.kt)("br",{parentName:"p"}),"\n","0 1 0 0 0"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Input 2"),": ball coordinate (rowBall, colBall) = (4, 3)",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Input 3"),": hole coordinate (rowHole, colHole) = (0, 1)"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Output"),': "lul"'),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Explanation"),": There are two shortest ways for the ball to drop into the hole.",(0,r.kt)("br",{parentName:"p"}),"\n",'The first way is left -> up -> left, represented by "lul".',(0,r.kt)("br",{parentName:"p"}),"\n","The second way is up -> left, represented by 'ul'.",(0,r.kt)("br",{parentName:"p"}),"\n","Both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is \"lul\".")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Example 2"),":"),(0,r.kt)("img",{src:"/img/maze_2_example_2.png",width:"70%"}),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Input 1"),": a maze represented by a 2D array"),(0,r.kt)("p",{parentName:"blockquote"},"0 0 0 0 0",(0,r.kt)("br",{parentName:"p"}),"\n","1 1 0 0 1",(0,r.kt)("br",{parentName:"p"}),"\n","0 0 0 0 0",(0,r.kt)("br",{parentName:"p"}),"\n","0 1 0 0 1",(0,r.kt)("br",{parentName:"p"}),"\n","0 1 0 0 0"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Input 2"),": ball coordinate (rowBall, colBall) = (4, 3)",(0,r.kt)("br",{parentName:"p"}),"\n",(0,r.kt)("strong",{parentName:"p"},"Input 3"),": hole coordinate (rowHole, colHole) = (3, 0)"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Output"),': "impossible"'),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Explanation"),": The ball cannot reach the hole.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note"),":"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"There is only one ball and one hole in the maze."),(0,r.kt)("li",{parentName:"ol"},"Both the ball and hole exist on an empty space, and they will not be at the same position initially."),(0,r.kt)("li",{parentName:"ol"},"The given maze does not contain border (like the red rectangle in the example pictures), but you could assume the border of the maze are all walls."),(0,r.kt)("li",{parentName:"ol"},"The maze contains at least 2 empty spaces, and the width and the height of the maze won't exceed 30.")),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u5f88\u663e\u7136\uff0c\u7528 BFS\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)(l.Z,{defaultValue:"python",values:[{label:"Python",value:"python"},{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"python",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"TODO\n"))),(0,r.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// The Maze III\n// BFS\n// Time complexity : O(m*n*max(m,n))\n// Space complexity : O(mn)\npublic class Solution {\n    public String findShortestWay(int[][] maze, int[] ball, int[] hole) {\n        int m = maze.length, n = maze[0].length;\n        Point[][] points = new Point[m][n];\n        for (int i = 0; i < m * n; i++) points[i/n][i%n] = new Point(i/n, i%n);\n\n        Queue<Point> q=new LinkedList<>();\n        int[][] directions = {{-1,0}, {1,0}, {0,-1}, {0,1}};\n        String[] names=new String[] {"u", "d", "l", "r"};\n\n        final Function<Point, Boolean> stateIsValid = (Point p) ->\n                0 <= p.x && p.x < maze.length && 0 <= p.y && p.y < maze[0].length &&\n                        maze[p.x][p.y] == 0 && (p.x!=hole[0] || p.y !=hole[1]);\n        final Function<Point, Boolean> stateIsTarget = (Point p) ->\n                p.x ==hole[0] && p.y ==hole[1];\n        final Function<Point, List<Point>> stateExtend = (Point p) -> {\n            List<Point> result = new ArrayList<>();\n\n            for (int i = 0; i < 4; i++) {\n                Point newPoint = new Point(p);\n                while (stateIsValid.apply(newPoint)) {\n                    newPoint.x +=directions[i][0];\n                    newPoint.y +=directions[i][1];\n                    newPoint.distance++;\n                }\n\n                if (!stateIsTarget.apply(newPoint)) { // check the hole\n                    newPoint.x -= directions[i][0];\n                    newPoint.y -= directions[i][1];\n                    newPoint.distance--;\n                }\n                if (newPoint.compareTo(points[newPoint.x][newPoint.y]) < 0) {\n                    newPoint.path += names[i];\n                    result.add(newPoint);\n                }\n            }\n            return result;\n        };\n\n        points[ball[0]][ball[1]].distance = 0;\n        q.offer(points[ball[0]][ball[1]]);\n        while (!q.isEmpty()) {\n            Point p = q.poll();\n            List<Point> newStates = stateExtend.apply(p);\n            for (Point newState : newStates) {\n                q.offer(newState);\n                points[newState.x][newState.y] = newState;\n            }\n        }\n\n        return points[hole[0]][hole[1]].distance ==Integer.MAX_VALUE ? "impossible" : points[hole[0]][hole[1]].path;\n    }\n\n    static class Point implements Comparable<Point> {\n        int x, y; // coordinates\n        int distance; // distance between start and this point\n        String path; // path from start to this point\n\n        public Point(int x, int y) {\n            this.x = x;\n            this.y = y;\n            this.distance =Integer.MAX_VALUE;\n            this.path ="";\n        }\n\n        public Point(Point other) {\n            this.x = other.x;\n            this.y = other.y;\n            this.distance = other.distance;\n            this.path = other.path;\n        }\n        @Override\n        public int compareTo(Point other) {\n            if (this.distance == other.distance) {\n                return this.path.compareTo(other.path);\n            } else {\n                return this.distance - other.distance;\n            }\n        }\n    }\n}\n'))),(0,r.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"TODO\n")))),(0,r.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/bfs/the-maze"},"The Maze")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/bfs/the-maze-ii"},"The Maze II"))))}h.isMDXComponent=!0}}]);