"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[7050],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=r.createContext({}),d=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(o.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=d(n),h=a,f=p["".concat(o,".").concat(h)]||p[h]||c[h]||s;return n?r.createElement(f,i(i({ref:t},u),{},{components:n})):r.createElement(f,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,i=new Array(s);i[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<s;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(7294),a=n(6010);const s="tabItem_Ymn6";function i(e){let{children:t,hidden:n,className:i}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(s,i),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>h});var r=n(7462),a=n(7294),s=n(6010),i=n(2389),l=n(7392),o=n(7094),d=n(2466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var t,n;const{lazy:i,block:p,defaultValue:h,values:f,groupId:w,className:v}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),g=null!=f?f:m.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),b=(0,l.l)(g,((e,t)=>e.value===t.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const S=null===h?h:null!=(t=null!=h?h:null==(n=m.find((e=>e.props.default)))?void 0:n.props.value)?t:m[0].props.value;if(null!==S&&!g.some((e=>e.value===S)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+S+'" but none of its children has the corresponding value. Available values are: '+g.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:y,setTabGroupChoices:_}=(0,o.U)(),[k,O]=(0,a.useState)(S),x=[],{blockElementScrollPositionUntilNextRender:T}=(0,d.o5)();if(null!=w){const e=y[w];null!=e&&e!==k&&g.some((t=>t.value===e))&&O(e)}const N=e=>{const t=e.currentTarget,n=x.indexOf(t),r=g[n].value;r!==k&&(T(t),O(r),null!=w&&_(w,String(r)))},E=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=x.indexOf(e.currentTarget)+1;n=null!=(r=x[t])?r:x[0];break}case"ArrowLeft":{var a;const t=x.indexOf(e.currentTarget)-1;n=null!=(a=x[t])?a:x[x.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":p},v)},g.map((e=>{let{value:t,label:n,attributes:i}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,key:t,ref:e=>x.push(e),onKeyDown:E,onFocus:N,onClick:N},i,{className:(0,s.Z)("tabs__item",c,null==i?void 0:i.className,{"tabs__item--active":k===t})}),null!=n?n:t)}))),i?(0,a.cloneElement)(m.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})))))}function h(e){const t=(0,i.Z)();return a.createElement(p,(0,r.Z)({key:String(t)},e))}},7009:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var r=n(7462),a=(n(7294),n(3905)),s=n(5488),i=n(5162);const l={title:"Word Ladder"},o=void 0,d={unversionedId:"bfs/word-ladder",id:"bfs/word-ladder",title:"Word Ladder",description:"\u63cf\u8ff0",source:"@site/docs/bfs/word-ladder.md",sourceDirName:"bfs",slug:"/bfs/word-ladder",permalink:"/bfs/word-ladder",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/bfs/word-ladder.md",tags:[],version:"current",frontMatter:{title:"Word Ladder"},sidebar:"someSidebar",previous:{title:"\u7b80\u4ecb",permalink:"/bfs/"},next:{title:"Word Ladder II",permalink:"/bfs/word-ladder-ii"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u5355\u961f\u5217",id:"\u5355\u961f\u5217",level:3},{value:"\u53cc\u961f\u5217",id:"\u53cc\u961f\u5217",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],p={toc:c};function h(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Only one letter can be changed at a time"),(0,a.kt)("li",{parentName:"ul"},"Each intermediate word must exist in the dictionary")),(0,a.kt)("p",null,"For example, Given:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'start = "hit"\nend = "cog"\ndict = ["hot","dot","dog","lot","log"]\n')),(0,a.kt)("p",null,"As one shortest transformation is ",(0,a.kt)("inlineCode",{parentName:"p"},'"hit" -> "hot" -> "dot" -> "dog" -> "cog"'),", return its length ",(0,a.kt)("inlineCode",{parentName:"p"},"5"),"."),(0,a.kt)("p",null,"Note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Return 0 if there is no such transformation sequence."),(0,a.kt)("li",{parentName:"ul"},"All words have the same length."),(0,a.kt)("li",{parentName:"ul"},"All words contain only lowercase alphabetic characters.")),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u6c42\u6700\u77ed\u8def\u5f84\uff0c\u7528\u5e7f\u641c\u3002"),(0,a.kt)("h3",{id:"\u5355\u961f\u5217"},"\u5355\u961f\u5217"),(0,a.kt)(s.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Word Ladder\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {\n        Queue<State> q = new LinkedList<>();\n        HashSet<State> visited = new HashSet<>(); // \u5224\u91cd\n\n        final Function<State, Boolean> stateIsValid = (State s) ->\n                wordList.contains(s.word) || s.word.equals(endWord);\n        final Function<State, Boolean> stateIsTarget = (State s) ->\n                s.word.equals(endWord);\n\n        final Function<State, HashSet<State> > stateExtend = (State s) -> {\n            HashSet<State> result = new HashSet<>();\n\n            char[] array = s.word.toCharArray();\n            for (int i = 0; i < array.length; ++i) {\n                final char old = array[i];\n                for (char c = 'a'; c <= 'z'; c++) {\n                    // \u9632\u6b62\u540c\u5b57\u6bcd\u66ff\u6362\n                    if (c == array[i]) continue;\n\n                    array[i] = c;\n                    State newState = new State(new String(array), s.level+1);\n\n                    if (stateIsValid.apply(newState) &&\n                            !visited.contains(newState)) {\n                        result.add(newState);\n                    }\n                    array[i] = old; // \u6062\u590d\u8be5\u5355\u8bcd\n                }\n            }\n\n            return result;\n        };\n\n        State startState = new State(beginWord, 0);\n        q.offer(startState);\n        visited.add(startState);\n        while (!q.isEmpty()) {\n            State state = q.poll();\n\n            if (stateIsTarget.apply(state)) {\n                return state.level + 1;\n            }\n\n\n            HashSet<State> newStates = stateExtend.apply(state);\n            for (State newState : newStates) {\n                q.offer(newState);\n                visited.add(newState);\n            }\n        }\n        return 0;\n    }\n\n    static class State {\n        String word;\n        int level;\n\n        public State(String word, int level) {\n            this.word = word;\n            this.level = level;\n        }\n\n        @Override\n        public int hashCode() {\n            return word.hashCode();\n        }\n\n        @Override\n        public boolean equals(Object other) {\n            if (this == other) return true;\n            if (this.hashCode() != other.hashCode()) return false;\n            if (!(other instanceof State)) return false;\n\n            return this.word.equals(((State) other).word);\n        }\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Word Ladder\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nstruct state_t {\n    string word;\n    int level;\n\n    state_t() { word = \"\"; level = 0; }\n    state_t(const string& word, int level) {\n        this->word = word;\n        this->level = level;\n    }\n\n    bool operator==(const state_t &other) const {\n        return this->word == other.word;\n    }\n};\n\nnamespace std {\n    template<> struct hash<state_t> {\n    public:\n        size_t operator()(const state_t& s) const {\n            return str_hash(s.word);\n        }\n    private:\n        std::hash<std::string> str_hash;\n    };\n}\n\n\nclass Solution {\npublic:\n    int ladderLength(const string& start, const string &end,\n            const unordered_set<string> &dict) {\n        queue<state_t> q;\n        unordered_set<state_t> visited;  // \u5224\u91cd\n\n        auto state_is_valid = [&](const state_t& s) {\n            return dict.find(s.word) != dict.end() || s.word == end;\n        };\n        auto state_is_target = [&](const state_t &s) {return s.word == end; };\n        auto state_extend = [&](const state_t &s) {\n            unordered_set<state_t> result;\n\n            for (size_t i = 0; i < s.word.size(); ++i) {\n                state_t new_state(s.word, s.level + 1);\n                for (char c = 'a'; c <= 'z'; c++) {\n                    // \u9632\u6b62\u540c\u5b57\u6bcd\u66ff\u6362\n                    if (c == new_state.word[i]) continue;\n\n                    swap(c, new_state.word[i]);\n\n                    if (state_is_valid(new_state) &&\n                        visited.find(new_state) == visited.end()) {\n                        result.insert(new_state);\n                    }\n                    swap(c, new_state.word[i]); // \u6062\u590d\u8be5\u5355\u8bcd\n                }\n            }\n\n            return result;\n        };\n\n        state_t start_state(start, 0);\n        q.push(start_state);\n        visited.insert(start_state);\n        while (!q.empty()) {\n            // \u5343\u4e07\u4e0d\u80fd\u7528 const auto&\uff0cpop() \u4f1a\u5220\u9664\u5143\u7d20\uff0c\n            // \u5f15\u7528\u5c31\u53d8\u6210\u4e86\u60ac\u7a7a\u5f15\u7528\n            const auto state = q.front();\n            q.pop();\n\n            if (state_is_target(state)) {\n                return state.level + 1;\n            }\n\n            const auto& new_states = state_extend(state);\n            for (const auto& new_state : new_states) {\n                q.push(new_state);\n                visited.insert(new_state);\n            }\n        }\n        return 0;\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u53cc\u961f\u5217"},"\u53cc\u961f\u5217"),(0,a.kt)(s.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Word Ladder\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    public int ladderLength(String beginWord, String endWord, Set<String> wordList) {\n        Queue<String> current = new LinkedList<>(); // \u5f53\u524d\u5c42\n        Queue<String> next = new LinkedList<>();    // \u4e0b\u4e00\u5c42\n        HashSet<String> visited = new HashSet<>();  // \u5224\u91cd\n\n        int level = -1;  // \u5c42\u6b21\n\n        final Function<String, Boolean> stateIsValid = (String s) ->\n                wordList.contains(s) || s.equals(endWord);\n        final Function<String, Boolean> stateIsTarget = (String s) ->\n                s.equals(endWord);\n\n        final Function<String, HashSet<String> > stateExtend = (String s) -> {\n            HashSet<String> result = new HashSet<>();\n\n            char[] array = s.toCharArray();\n            for (int i = 0; i < array.length; ++i) {\n                final char old = array[i];\n                for (char c = 'a'; c <= 'z'; c++) {\n                    // \u9632\u6b62\u540c\u5b57\u6bcd\u66ff\u6362\n                    if (c == array[i]) continue;\n\n                    array[i] = c;\n                    String newState = new String(array);\n\n                    if (stateIsValid.apply(newState) &&\n                            !visited.contains(newState)) {\n                        result.add(newState);\n                    }\n                    array[i] = old; // \u6062\u590d\u8be5\u5355\u8bcd\n                }\n            }\n\n            return result;\n        };\n\n        current.offer(beginWord);\n        visited.add(beginWord);\n        while (!current.isEmpty()) {\n            ++level;\n            while (!current.isEmpty()) {\n                // \u5343\u4e07\u4e0d\u80fd\u7528 const auto&\uff0cpop() \u4f1a\u5220\u9664\u5143\u7d20\uff0c\n                // \u5f15\u7528\u5c31\u53d8\u6210\u4e86\u60ac\u7a7a\u5f15\u7528\n                String state = current.poll();\n\n                if (stateIsTarget.apply(state)) {\n                    return level + 1;\n                }\n\n                HashSet<String> newStates = stateExtend.apply(state);\n                for (String newState : newStates) {\n                    next.offer(newState);\n                    visited.add(newState);\n                }\n            }\n            // swap\n            Queue<String> tmp = current;\n            current = next;\n            next = tmp;\n        }\n        return 0;\n    }\n}\n"))),(0,a.kt)(i.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Word Ladder\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    int ladderLength(const string& start, const string &end,\n            const unordered_set<string> &dict) {\n        queue<string> current, next;    // \u5f53\u524d\u5c42\uff0c\u4e0b\u4e00\u5c42\n        unordered_set<string> visited;  // \u5224\u91cd\n\n        int level = -1;  // \u5c42\u6b21\n\n        auto state_is_valid = [&](const string& s) {\n            return dict.find(s) != dict.end() || s == end;\n        };\n        auto state_is_target = [&](const string &s) {return s == end;};\n        auto state_extend = [&](const string &s) {\n            unordered_set<string> result;\n\n            for (size_t i = 0; i < s.size(); ++i) {\n                string new_word(s);\n                for (char c = 'a'; c <= 'z'; c++) {\n                    // \u9632\u6b62\u540c\u5b57\u6bcd\u66ff\u6362\n                    if (c == new_word[i]) continue;\n\n                    swap(c, new_word[i]);\n\n                    if (state_is_valid(new_word) &&\n                        visited.find(new_word) == visited.end()) {\n                        result.insert(new_word);\n                    }\n                    swap(c, new_word[i]); // \u6062\u590d\u8be5\u5355\u8bcd\n                }\n            }\n\n            return result;\n        };\n\n        current.push(start);\n        visited.insert(start);\n        while (!current.empty()) {\n            ++level;\n            while (!current.empty()) {\n                // \u5343\u4e07\u4e0d\u80fd\u7528 const auto&\uff0cpop() \u4f1a\u5220\u9664\u5143\u7d20\uff0c\n                // \u5f15\u7528\u5c31\u53d8\u6210\u4e86\u60ac\u7a7a\u5f15\u7528\n                const auto state = current.front();\n                current.pop();\n\n                if (state_is_target(state)) {\n                    return level + 1;\n                }\n\n                const auto& new_states = state_extend(state);\n                for (const auto& new_state : new_states) {\n                    next.push(new_state);\n                    visited.insert(new_state);\n                }\n            }\n            swap(next, current);\n        }\n        return 0;\n    }\n};\n")))),(0,a.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/bfs/word-ladder-ii"},"Word Ladder II"))))}h.isMDXComponent=!0}}]);