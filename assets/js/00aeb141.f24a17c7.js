"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[9494],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,b=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?r.createElement(b,o(o({ref:t},c),{},{components:n})):r.createElement(b,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>o});var r=n(7294),a=n(6010);const i="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>m});var r=n(7462),a=n(7294),i=n(6010),o=n(2389),l=n(7392),s=n(7094),u=n(2466);const c="tabList__CuJ",p="tabItem_LNqP";function d(e){var t,n;const{lazy:o,block:d,defaultValue:m,values:b,groupId:f,className:g}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=b?b:v.map((e=>{let{props:{value:t,label:n,attributes:r}}=e;return{value:t,label:n,attributes:r}})),y=(0,l.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error('Docusaurus error: Duplicate values "'+y.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==k&&!h.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+h.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:w,setTabGroupChoices:j}=(0,s.U)(),[O,N]=(0,a.useState)(k),T=[],{blockElementScrollPositionUntilNextRender:C}=(0,u.o5)();if(null!=f){const e=w[f];null!=e&&e!==O&&h.some((t=>t.value===e))&&N(e)}const E=e=>{const t=e.currentTarget,n=T.indexOf(t),r=h[n].value;r!==O&&(C(t),N(r),null!=f&&j(f,String(r)))},S=e=>{var t;let n=null;switch(e.key){case"ArrowRight":{var r;const t=T.indexOf(e.currentTarget)+1;n=null!=(r=T[t])?r:T[0];break}case"ArrowLeft":{var a;const t=T.indexOf(e.currentTarget)-1;n=null!=(a=T[t])?a:T[T.length-1];break}}null==(t=n)||t.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":d},g)},h.map((e=>{let{value:t,label:n,attributes:o}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>T.push(e),onKeyDown:S,onFocus:E,onClick:E},o,{className:(0,i.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===t})}),null!=n?n:t)}))),o?(0,a.cloneElement)(v.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function m(e){const t=(0,o.Z)();return a.createElement(d,(0,r.Z)({key:String(t)},e))}},8051:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>p});var r=n(7462),a=(n(7294),n(3905)),i=n(5488),o=n(5162);const l={title:"Letter Combinations of a Phone Number"},s=void 0,u={unversionedId:"brute-force/letter-combinations-of-a-phone-number1",id:"brute-force/letter-combinations-of-a-phone-number1",title:"Letter Combinations of a Phone Number",description:"\u63cf\u8ff0",source:"@site/docs/brute-force/letter-combinations-of-a-phone-number1.md",sourceDirName:"brute-force",slug:"/brute-force/letter-combinations-of-a-phone-number1",permalink:"/brute-force/letter-combinations-of-a-phone-number1",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/brute-force/letter-combinations-of-a-phone-number1.md",tags:[],version:"current",frontMatter:{title:"Letter Combinations of a Phone Number"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u9012\u5f52",id:"\u9012\u5f52",level:3},{value:"\u8fed\u4ee3",id:"\u8fed\u4ee3",level:3}],d={toc:p};function m(e){let{components:t,...l}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,l,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a digit string, return all possible letter combinations that the number could represent."),(0,a.kt)("p",null,"A mapping of digit to letters (just like on the telephone buttons) is given below."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Phone Keyboard",src:n(9444).Z,width:"200",height:"162"})),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Input:"),"Digit string ",(0,a.kt)("inlineCode",{parentName:"p"},'"23"')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Output:")," ",(0,a.kt)("inlineCode",{parentName:"p"},'["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"]'),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Note:"),"\nAlthough the above answer is in lexicographical order, your answer could be in any order you want."),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u65e0"),(0,a.kt)("h3",{id:"\u9012\u5f52"},"\u9012\u5f52"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Letter Combinations of a Phone Number\n// \u65f6\u95f4\u590d\u6742\u5ea6O(3^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\npublic class Solution {\n    private static final String[] keyboard =\n            new String[]{ " ", "", "abc", "def", // \'0\',\'1\',\'2\',...\n            "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };\n\n    public List<String> letterCombinations(String digits) {\n        List<String> result = new ArrayList<>();\n        if (digits.isEmpty()) return result;\n        dfs(digits, 0, "", result);\n        return result;\n    }\n\n    private static void dfs(String digits, int cur, String path,\n                            List<String> result) {\n        if (cur == digits.length()) {\n            result.add(path);\n            return;\n        }\n        final String str = keyboard[digits.charAt(cur) - \'0\'];\n\n        for (char c : keyboard[digits.charAt(cur) - \'0\'].toCharArray()) {\n            dfs(digits, cur + 1, path + c, result);\n        }\n    }\n}\n'))),(0,a.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Letter Combinations of a Phone Number\n// \u65f6\u95f4\u590d\u6742\u5ea6O(3^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\nclass Solution {\npublic:\n    const vector<string> keyboard { " ", "", "abc", "def", // \'0\',\'1\',\'2\',...\n            "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };\n\n    vector<string> letterCombinations (const string &digits) {\n        vector<string> result;\n        if (digits.empty()) return result;\n        dfs(digits, 0, "", result);\n        return result;\n    }\n\n    void dfs(const string &digits, size_t cur, string path,\n            vector<string> &result) {\n        if (cur == digits.size()) {\n            result.push_back(path);\n            return;\n        }\n        for (auto c : keyboard[digits[cur] - \'0\']) {\n            dfs(digits, cur + 1, path + c, result);\n        }\n    }\n};\n')))),(0,a.kt)("h3",{id:"\u8fed\u4ee3"},"\u8fed\u4ee3"),(0,a.kt)(i.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Letter Combinations of a Phone Number\n// \u65f6\u95f4\u590d\u6742\u5ea6O(3^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\npublic class Solution {\n    private static final String[] keyboard =\n            new String[]{ " ", "", "abc", "def", // \'0\',\'1\',\'2\',...\n                    "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };\n\n    public List<String> letterCombinations(String digits) {\n        if (digits.isEmpty()) return new ArrayList<>();\n        List<String> result = new ArrayList<>();\n        result.add("");\n        for (char d : digits.toCharArray()) {\n            final int n = result.size();\n            final int m = keyboard[d - \'0\'].length();\n\n            // resize to n * m\n            for (int i = 1; i < m; ++i) {\n                for (int j = 0; j < n; ++j) {\n                    result.add(result.get(j));\n                }\n            }\n\n            for (int i = 0; i < result.size(); ++i) {\n                result.set(i, result.get(i) + keyboard[d - \'0\'].charAt(i/n));\n            }\n        }\n        return result;\n    }\n}\n'))),(0,a.kt)(o.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},'// Letter Combinations of a Phone Number\n// \u65f6\u95f4\u590d\u6742\u5ea6O(3^n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(1)\nclass Solution {\npublic:\n    const vector<string> keyboard { " ", "", "abc", "def", // \'0\',\'1\',\'2\',...\n            "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz" };\n\n    vector<string> letterCombinations (const string &digits) {\n        if (digits.empty()) return vector<string>();\n        vector<string> result(1, "");\n        for (auto d : digits) {\n            const size_t n = result.size();\n            const size_t m = keyboard[d - \'0\'].size();\n\n            // resize to n * m\n            for (size_t i = 1; i < m; ++i) {\n                for (size_t j = 0; j < n; ++j) {\n                    result.push_back(result[j]);\n                }\n            }\n\n            for (size_t i = 0; i < result.size(); ++i) {\n                result[i] = result[i] + keyboard[d - \'0\'][i/n];\n            }\n        }\n        return result;\n    }\n};\n')))))}m.isMDXComponent=!0},9444:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/phone-keyboard-a697160e29404c1c63994256f357ab55.png"}}]);