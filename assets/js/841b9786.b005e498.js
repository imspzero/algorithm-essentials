"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1024],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function u(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):u(u({},t),e)),n},s=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=o(n),k=r,d=c["".concat(p,".").concat(k)]||c[k]||m[k]||i;return n?a.createElement(d,u(u({ref:t},s),{},{components:n})):a.createElement(d,u({ref:t},s))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,u=new Array(i);u[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,u[1]=l;for(var o=2;o<i;o++)u[o]=n[o];return a.createElement.apply(null,u)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2831:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={title:"Implement Queue using Stacks"},u=void 0,l={unversionedId:"stack-and-queue/queue/implement-queue-using-stacks",id:"stack-and-queue/queue/implement-queue-using-stacks",title:"Implement Queue using Stacks",description:"\u63cf\u8ff0",source:"@site/docs/stack-and-queue/queue/implement-queue-using-stacks.md",sourceDirName:"stack-and-queue/queue",slug:"/stack-and-queue/queue/implement-queue-using-stacks",permalink:"/stack-and-queue/queue/implement-queue-using-stacks",draft:!1,editUrl:"https://github.com/soulmachine/algorithm-essentials/edit/master/docs/stack-and-queue/queue/implement-queue-using-stacks.md",tags:[],version:"current",frontMatter:{title:"Implement Queue using Stacks"},sidebar:"someSidebar",previous:{title:"Median of Data Stream",permalink:"/stack-and-queue/stack/median-of-data-stream"},next:{title:"Moving Average of Data Stream",permalink:"/stack-and-queue/queue/moving-average-of-data-stream"}},p={},o=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3},{value:"\u76f8\u5173\u9898\u76ee",id:"\u76f8\u5173\u9898\u76ee",level:3}],s={toc:o};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,r.kt)("p",null,"Implement the following operations of a queue using stacks."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"push(x) -- Push element x to the back of queue."),(0,r.kt)("li",{parentName:"ul"},"pop() -- Removes the element from in front of queue."),(0,r.kt)("li",{parentName:"ul"},"peek() -- Get the front element."),(0,r.kt)("li",{parentName:"ul"},"empty() -- Return whether the queue is empty.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Notes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"You must use only standard operations of a stack -- which means only push to top, peek/pop from top, size, and is empty operations are valid."),(0,r.kt)("li",{parentName:"ul"},"Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack."),(0,r.kt)("li",{parentName:"ul"},"You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).")),(0,r.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,r.kt)("p",null,"\u53ef\u4ee5\u7528\u4e24\u4e2a\u6808\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"s"),"\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"tmp"),"\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"s"),"\u5b58\u653e\u5143\u7d20\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"tmp"),"\u7528\u6765\u4f5c\u4e2d\u8f6c\u3002"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"push(x)"),"\uff0c\u5148\u5c06",(0,r.kt)("inlineCode",{parentName:"li"},"s"),"\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u6765\uff0c\u5b58\u5165",(0,r.kt)("inlineCode",{parentName:"li"},"tmp"),"\uff0c\u628a",(0,r.kt)("inlineCode",{parentName:"li"},"x")," push \u5230",(0,r.kt)("inlineCode",{parentName:"li"},"tmp"),"\uff0c\u7136\u540e\u628a",(0,r.kt)("inlineCode",{parentName:"li"},"tmp"),"\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5f39\u51fa\u6765\uff0c\u5b58\u5165",(0,r.kt)("inlineCode",{parentName:"li"},"s")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pop()"),"\uff0c\u76f4\u63a5\u5c06",(0,r.kt)("inlineCode",{parentName:"li"},"s"),"\u7684\u6808\u9876\u5143\u7d20\u5f39\u51fa\u6765\u5373\u53ef")),(0,r.kt)("p",null,"\u8be5\u7b97\u6cd5",(0,r.kt)("inlineCode",{parentName:"p"},"push"),"\u7684\u7b97\u6cd5\u590d\u6742\u5ea6\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pop"),"\u7684\u7b97\u6cd5\u590d\u6742\u5ea6",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\u3002"),(0,r.kt)("p",null,"\u53e6\u4e2a\u4e00\u4e2a\u65b9\u6cd5\u662f\uff0c\u8ba9",(0,r.kt)("inlineCode",{parentName:"p"},"pop"),"\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(n)"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"push"),"\u662f",(0,r.kt)("inlineCode",{parentName:"p"},"O(1)"),"\uff0c\u601d\u8def\u5f88\u7c7b\u4f3c\uff0c\u5c31\u4e0d\u8d58\u8ff0\u4e86\u3002"),(0,r.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Implement Queue using Stacks\nclass MyQueue {\n    // Push element x to the back of queue.\n    // Time Complexity: O(n)\n    public void push(int x) {\n        while (!s.isEmpty()) {\n            final int e = s.pop();\n            tmp.push(e);\n        }\n        tmp.push(x);\n\n        while(!tmp.isEmpty()) {\n            final int e = tmp.pop();\n            s.push(e);\n        }\n    }\n\n    // Removes the element from in front of queue.\n    // Time Complexity: O(1)\n    public void pop() {\n        s.pop();\n    }\n\n    // Get the front element.\n    public int peek() {\n        return s.peek();\n    }\n\n    // Return whether the queue is empty.\n    public boolean empty() {\n        return s.isEmpty();\n    }\n\n    private final Stack<Integer> s = new Stack<>();\n    private final Stack<Integer> tmp = new Stack<>();\n}\n")),(0,r.kt)("h3",{id:"\u76f8\u5173\u9898\u76ee"},"\u76f8\u5173\u9898\u76ee"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/stack-and-queue/stack/implement-stack-using-queues"},"Implement Stack using Queues"))))}m.isMDXComponent=!0}}]);