"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1842],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function u(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=n.createContext({}),s=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=u(e,["components","mdxType","originalType","parentName"]),m=s(r),d=a,f=m["".concat(i,".").concat(d)]||m[d]||p[d]||o;return r?n.createElement(f,l(l({ref:t},c),{},{components:r})):n.createElement(f,l({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=m;var u={};for(var i in t)hasOwnProperty.call(t,i)&&(u[i]=t[i]);u.originalType=e,u.mdxType="string"==typeof e?e:a,l[1]=u;for(var s=2;s<o;s++)l[s]=r[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:(e,t,r)=>{r.d(t,{Z:()=>l});var n=r(7294),a=r(6010);const o="tabItem_Ymn6";function l(e){let{children:t,hidden:r,className:l}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:r},t)}},5488:(e,t,r)=>{r.d(t,{Z:()=>d});var n=r(7462),a=r(7294),o=r(6010),l=r(2389),u=r(7392),i=r(7094),s=r(2466);const c="tabList__CuJ",p="tabItem_LNqP";function m(e){var t;const{lazy:r,block:l,defaultValue:m,values:d,groupId:f,className:b}=e,v=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=d??v.map((e=>{let{props:{value:t,label:r,attributes:n}}=e;return{value:t,label:r,attributes:n}})),y=(0,u.l)(h,((e,t)=>e.value===t.value));if(y.length>0)throw new Error(`Docusaurus error: Duplicate values "${y.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const g=null===m?m:m??(null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)??v[0].props.value;if(null!==g&&!h.some((e=>e.value===g)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${g}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:k,setTabGroupChoices:N}=(0,i.U)(),[O,T]=(0,a.useState)(g),w=[],{blockElementScrollPositionUntilNextRender:E}=(0,s.o5)();if(null!=f){const e=k[f];null!=e&&e!==O&&h.some((t=>t.value===e))&&T(e)}const j=e=>{const t=e.currentTarget,r=w.indexOf(t),n=h[r].value;n!==O&&(E(t),T(n),null!=f&&N(f,String(n)))},x=e=>{var t;let r=null;switch(e.key){case"ArrowRight":{const t=w.indexOf(e.currentTarget)+1;r=w[t]??w[0];break}case"ArrowLeft":{const t=w.indexOf(e.currentTarget)-1;r=w[t]??w[w.length-1];break}}null==(t=r)||t.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",c)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},b)},h.map((e=>{let{value:t,label:r,attributes:l}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:O===t?0:-1,"aria-selected":O===t,key:t,ref:e=>w.push(e),onKeyDown:x,onFocus:j,onClick:j},l,{className:(0,o.Z)("tabs__item",p,null==l?void 0:l.className,{"tabs__item--active":O===t})}),r??t)}))),r?(0,a.cloneElement)(v.filter((e=>e.props.value===O))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==O})))))}function d(e){const t=(0,l.Z)();return a.createElement(m,(0,n.Z)({key:String(t)},e))}},6699:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>u,metadata:()=>s,toc:()=>p});var n=r(7462),a=(r(7294),r(3905)),o=r(5488),l=r(5162);const u={title:"Sum Root to Leaf Numbers"},i=void 0,s={unversionedId:"binary-tree/recursion/sum-root-to-leaf-numbers",id:"binary-tree/recursion/sum-root-to-leaf-numbers",title:"Sum Root to Leaf Numbers",description:"\u63cf\u8ff0",source:"@site/docs/binary-tree/recursion/sum-root-to-leaf-numbers.md",sourceDirName:"binary-tree/recursion",slug:"/binary-tree/recursion/sum-root-to-leaf-numbers",permalink:"/binary-tree/recursion/sum-root-to-leaf-numbers",draft:!1,tags:[],version:"current",frontMatter:{title:"Sum Root to Leaf Numbers"},sidebar:"docs",previous:{title:"Populating Next Right Pointers in Each Node",permalink:"/binary-tree/recursion/populating-next-right-pointers-in-each-node"},next:{title:"LCA of Binary Tree",permalink:"/binary-tree/recursion/lca-of-binary-tree"}},c={},p=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],m={toc:p};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a binary tree containing digits from ",(0,a.kt)("inlineCode",{parentName:"p"},"0-9")," only, each root-to-leaf path could represent a number."),(0,a.kt)("p",null,"An example is the root-to-leaf path ",(0,a.kt)("inlineCode",{parentName:"p"},"1->2->3")," which represents the number ",(0,a.kt)("inlineCode",{parentName:"p"},"123"),"."),(0,a.kt)("p",null,"Find the total sum of all root-to-leaf numbers."),(0,a.kt)("p",null,"For example,"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"    1\n   / \\\n  2   3\n")),(0,a.kt)("p",null,"The root-to-leaf path ",(0,a.kt)("inlineCode",{parentName:"p"},"1->2")," represents the number ",(0,a.kt)("inlineCode",{parentName:"p"},"12"),".\nThe root-to-leaf path ",(0,a.kt)("inlineCode",{parentName:"p"},"1->3")," represents the number ",(0,a.kt)("inlineCode",{parentName:"p"},"13"),"."),(0,a.kt)("p",null,"Return the sum = ",(0,a.kt)("inlineCode",{parentName:"p"},"12 + 13 = 25"),"."),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u65e0"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Sum root to leaf numbers\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\npublic class Solution {\n    public int sumNumbers(TreeNode root) {\n        return dfs(root, 0);\n    }\n    private static int dfs(TreeNode root, int sum) {\n        if (root == null) return 0;\n        if (root.left == null && root.right == null)\n            return sum * 10 + root.val;\n\n        return dfs(root.left, sum * 10 + root.val) +\n                dfs(root.right, sum * 10 + root.val);\n    }\n}\n"))),(0,a.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Sum root to leaf numbers\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(logn)\nclass Solution {\npublic:\n    int sumNumbers(TreeNode *root) {\n        return dfs(root, 0);\n    }\nprivate:\n    int dfs(TreeNode *root, int sum) {\n        if (root == nullptr) return 0;\n        if (root->left == nullptr && root->right == nullptr)\n            return sum * 10 + root->val;\n\n        return dfs(root->left, sum * 10 + root->val) +\n                dfs(root->right, sum * 10 + root->val);\n    }\n};\n")))))}d.isMDXComponent=!0}}]);