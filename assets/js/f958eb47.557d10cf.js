"use strict";(self.webpackChunkalgorithm_essentials=self.webpackChunkalgorithm_essentials||[]).push([[1774],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=d(t),f=a,b=p["".concat(s,".").concat(f)]||p[f]||c[f]||o;return t?r.createElement(b,l(l({ref:n},u),{},{components:t})):r.createElement(b,l({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=p;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var d=2;d<o;d++)l[d]=t[d];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var r=t(7294),a=t(6010);const o="tabItem_Ymn6";function l(e){let{children:n,hidden:t,className:l}=e;return r.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,l),hidden:t},n)}},5488:(e,n,t)=>{t.d(n,{Z:()=>f});var r=t(7462),a=t(7294),o=t(6010),l=t(2389),i=t(7392),s=t(7094),d=t(2466);const u="tabList__CuJ",c="tabItem_LNqP";function p(e){var n;const{lazy:t,block:l,defaultValue:p,values:f,groupId:b,className:v}=e,m=a.Children.map(e.children,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),y=f??m.map((e=>{let{props:{value:n,label:t,attributes:r}}=e;return{value:n,label:t,attributes:r}})),h=(0,i.l)(y,((e,n)=>e.value===n.value));if(h.length>0)throw new Error(`Docusaurus error: Duplicate values "${h.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const w=null===p?p:p??(null==(n=m.find((e=>e.props.default)))?void 0:n.props.value)??m[0].props.value;if(null!==w&&!y.some((e=>e.value===w)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${w}" but none of its children has the corresponding value. Available values are: ${y.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:x,setTabGroupChoices:g}=(0,s.U)(),[k,O]=(0,a.useState)(w),j=[],{blockElementScrollPositionUntilNextRender:E}=(0,d.o5)();if(null!=b){const e=x[b];null!=e&&e!==k&&y.some((n=>n.value===e))&&O(e)}const T=e=>{const n=e.currentTarget,t=j.indexOf(n),r=y[t].value;r!==k&&(E(n),O(r),null!=b&&g(b,String(r)))},N=e=>{var n;let t=null;switch(e.key){case"ArrowRight":{const n=j.indexOf(e.currentTarget)+1;t=j[n]??j[0];break}case"ArrowLeft":{const n=j.indexOf(e.currentTarget)-1;t=j[n]??j[j.length-1];break}}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,o.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":l},v)},y.map((e=>{let{value:n,label:t,attributes:l}=e;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:k===n?0:-1,"aria-selected":k===n,key:n,ref:e=>j.push(e),onKeyDown:N,onFocus:T,onClick:T},l,{className:(0,o.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":k===n})}),t??n)}))),t?(0,a.cloneElement)(m.filter((e=>e.props.value===k))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},m.map(((e,n)=>(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==k})))))}function f(e){const n=(0,l.Z)();return a.createElement(p,(0,r.Z)({key:String(n)},e))}},6846:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=t(7462),a=(t(7294),t(3905)),o=t(5488),l=t(5162);const i={title:"Word Search"},s=void 0,d={unversionedId:"dfs/word-search",id:"dfs/word-search",title:"Word Search",description:"\u63cf\u8ff0",source:"@site/docs/dfs/word-search.md",sourceDirName:"dfs",slug:"/dfs/word-search",permalink:"/dfs/word-search",draft:!1,tags:[],version:"current",frontMatter:{title:"Word Search"},sidebar:"docs",previous:{title:"Sudoku Solver",permalink:"/dfs/sudoku-solver"},next:{title:"Android Unlock Patterns",permalink:"/dfs/android-unlock-patterns"}},u={},c=[{value:"\u63cf\u8ff0",id:"\u63cf\u8ff0",level:3},{value:"\u5206\u6790",id:"\u5206\u6790",level:3},{value:"\u4ee3\u7801",id:"\u4ee3\u7801",level:3}],p={toc:c};function f(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h3",{id:"\u63cf\u8ff0"},"\u63cf\u8ff0"),(0,a.kt)("p",null,"Given a 2D board and a word, find if the word exists in the grid."),(0,a.kt)("p",null,"The word can be constructed from letters of sequentially adjacent cell, where ",(0,a.kt)("inlineCode",{parentName:"p"},'"adjacent"')," cells are those horizontally or vertically neighbouring. The same letter cell may not be used more than once."),(0,a.kt)("p",null,"For example,\nGiven board ="),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[\n  ["ABCE"],\n  ["SFCS"],\n  ["ADEE"]\n]\n')),(0,a.kt)("p",null,"word = ",(0,a.kt)("inlineCode",{parentName:"p"},'"ABCCED"'),", -> returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),","),(0,a.kt)("p",null,"word = ",(0,a.kt)("inlineCode",{parentName:"p"},'"SEE"'),", -> returns ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),","),(0,a.kt)("p",null,"word = ",(0,a.kt)("inlineCode",{parentName:"p"},'"ABCB"'),", -> returns ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h3",{id:"\u5206\u6790"},"\u5206\u6790"),(0,a.kt)("p",null,"\u65e0\u3002"),(0,a.kt)("h3",{id:"\u4ee3\u7801"},"\u4ee3\u7801"),(0,a.kt)(o.Z,{defaultValue:"java",values:[{label:"Java",value:"java"},{label:"C++",value:"cpp"}],mdxType:"Tabs"},(0,a.kt)(l.Z,{value:"java",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Word Search\n// \u6df1\u641c\uff0c\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2*m^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\npublic class Solution {\n    public boolean exist(char[][] board, String word) {\n        final int m = board.length;\n        final int n = board[0].length;\n        boolean[][] visited = new boolean[m][n];\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j)\n                if (dfs(board, word, 0, i, j, visited))\n                    return true;\n        return false;\n    }\n    private static boolean dfs(char[][] board, String word,\n                    int index, int x, int y, boolean[][] visited) {\n        if (index == word.length())\n            return true; // \u6536\u655b\u6761\u4ef6\n\n        if (x < 0 || y < 0 || x >= board.length || y >= board[0].length)\n            return false;  // \u8d8a\u754c\uff0c\u7ec8\u6b62\u6761\u4ef6\n\n        if (visited[x][y]) return false; // \u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u526a\u679d\n\n        if (board[x][y] != word.charAt(index)) return false; // \u4e0d\u76f8\u7b49\uff0c\u526a\u679d\n\n        visited[x][y] = true;\n        boolean ret = dfs(board, word, index + 1, x - 1, y, visited) || // \u4e0a\n                dfs(board, word, index + 1, x + 1, y, visited)    || // \u4e0b\n                dfs(board, word, index + 1, x, y - 1, visited)    || // \u5de6\n                dfs(board, word, index + 1, x, y + 1, visited);      // \u53f3\n        visited[x][y] = false;\n        return ret;\n    }\n}\n"))),(0,a.kt)(l.Z,{value:"cpp",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"// Word Search\n// \u6df1\u641c\uff0c\u9012\u5f52\n// \u65f6\u95f4\u590d\u6742\u5ea6O(n^2*m^2)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n^2)\nclass Solution {\npublic:\n    bool exist(const vector<vector<char> > &board, const string& word) {\n        const int m = board.size();\n        const int n = board[0].size();\n        vector<vector<bool> > visited(m, vector<bool>(n, false));\n        for (int i = 0; i < m; ++i)\n            for (int j = 0; j < n; ++j)\n                if (dfs(board, word, 0, i, j, visited))\n                    return true;\n        return false;\n    }\nprivate:\n    static bool dfs(const vector<vector<char> > &board, const string &word,\n            int index, int x, int y, vector<vector<bool> > &visited) {\n        if (index == word.size())\n            return true; // \u6536\u655b\u6761\u4ef6\n\n        if (x < 0 || y < 0 || x >= board.size() || y >= board[0].size())\n            return false;  // \u8d8a\u754c\uff0c\u7ec8\u6b62\u6761\u4ef6\n\n        if (visited[x][y]) return false; // \u5df2\u7ecf\u8bbf\u95ee\u8fc7\uff0c\u526a\u679d\n\n        if (board[x][y] != word[index]) return false; // \u4e0d\u76f8\u7b49\uff0c\u526a\u679d\n\n        visited[x][y] = true;\n        bool ret = dfs(board, word, index + 1, x - 1, y, visited) || // \u4e0a\n                dfs(board, word, index + 1, x + 1, y, visited)    || // \u4e0b\n                dfs(board, word, index + 1, x, y - 1, visited)    || // \u5de6\n                dfs(board, word, index + 1, x, y + 1, visited);      // \u53f3\n        visited[x][y] = false;\n        return ret;\n    }\n};\n")))))}f.isMDXComponent=!0}}]);